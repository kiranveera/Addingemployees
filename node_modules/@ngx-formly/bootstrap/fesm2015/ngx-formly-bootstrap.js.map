{"version":3,"file":"ngx-formly-bootstrap.js.map","sources":["ng://@ngx-formly/bootstrap/lib/types/checkbox.ts","ng://@ngx-formly/bootstrap/lib/types/multicheckbox.ts","ng://@ngx-formly/bootstrap/lib/types/input.ts","ng://@ngx-formly/bootstrap/lib/types/radio.ts","ng://@ngx-formly/bootstrap/lib/types/textarea.ts","ng://@ngx-formly/bootstrap/lib/types/select.ts","ng://@ngx-formly/bootstrap/lib/wrappers/form-field.wrapper.ts","ng://@ngx-formly/bootstrap/lib/bootstrap.config.ts","ng://@ngx-formly/bootstrap/lib/bootstrap.module.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FieldType } from '@ngx-formly/core';\n\n@Component({\n  selector: 'formly-field-checkbox',\n  template: `\n    <div class=\"custom-control custom-checkbox\">\n      <input class=\"custom-control-input\" type=\"checkbox\"\n        [class.is-invalid]=\"showError\"\n        [indeterminate]=\"to.indeterminate && formControl.value === null\"\n        [formControl]=\"formControl\"\n        [formlyAttributes]=\"field\">\n      <label class=\"custom-control-label\" [for]=\"id\">\n        {{ to.label }}\n        <span *ngIf=\"to.required && to.hideRequiredMarker !== true\">*</span>\n      </label>\n    </div>\n  `,\n})\nexport class FormlyFieldCheckbox extends FieldType {\n  defaultOptions = {\n    templateOptions: {\n      indeterminate: true,\n      hideLabel: true,\n    },\n  };\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from '@ngx-formly/core';\n\n@Component({\n  selector: 'formly-field-multicheckbox',\n  template: `\n    <div>\n      <div *ngFor=\"let option of to.options | formlySelectOptions:field | async; let i = index;\"\n        [ngClass]=\"{ 'form-check': to.formCheck !== 'custom', 'form-check-inline': to.formCheck === 'inline', 'custom-control custom-checkbox': to.formCheck === 'custom' }\"\n      >\n        <input type=\"checkbox\"\n          [id]=\"id + '_' + i\"\n          [class.form-check-input]=\"to.formCheck !== 'custom'\"\n          [class.custom-control-input]=\"to.formCheck === 'custom'\"\n          [value]=\"option.value\"\n          [checked]=\"isChecked(option)\"\n          [formlyAttributes]=\"field\"\n          (change)=\"onChange(option.value, $event.target.checked)\">\n        <label\n          [class.form-check-label]=\"to.formCheck !== 'custom'\"\n          [class.custom-control-label]=\"to.formCheck === 'custom'\"\n          [for]=\"id + '_' + i\">\n          {{ option.label }}\n        </label>\n      </div>\n    <div>\n  `,\n})\nexport class FormlyFieldMultiCheckbox extends FieldType {\n  defaultOptions = {\n    templateOptions: {\n      options: [],\n      formCheck: 'custom', // 'custom' | 'stacked' | 'inline'\n    },\n  };\n\n  onChange(value: any, checked: boolean) {\n    if (this.to.type === 'array') {\n      this.formControl.patchValue(checked\n        ? [...(this.formControl.value || []), value]\n        : [...(this.formControl.value || [])].filter(o => o !== value),\n      );\n    } else {\n      this.formControl.patchValue({ ...this.formControl.value, [value]: checked });\n    }\n    this.formControl.markAsTouched();\n  }\n\n  isChecked(option: any) {\n    const value = this.formControl.value;\n\n    return value && (\n      this.to.type === 'array'\n        ? (value.indexOf(option.value) !== -1)\n        : value[option.value]\n    );\n  }\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from '@ngx-formly/core';\n\n@Component({\n  selector: 'formly-field-input',\n  template: `\n    <input *ngIf=\"type !== 'number' else numberTmp\" [type]=\"type\" [formControl]=\"formControl\" class=\"form-control\" [formlyAttributes]=\"field\" [class.is-invalid]=\"showError\">\n    <ng-template #numberTmp>\n      <input type=\"number\" [formControl]=\"formControl\" class=\"form-control\" [formlyAttributes]=\"field\" [class.is-invalid]=\"showError\">\n    </ng-template>\n  `,\n})\nexport class FormlyFieldInput extends FieldType {\n  get type() {\n    return this.to.type || 'text';\n  }\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from '@ngx-formly/core';\n\n@Component({\n  selector: 'formly-field-radio',\n  template: `\n    <div>\n      <div *ngFor=\"let option of to.options | formlySelectOptions:field | async; let i = index;\"\n        [ngClass]=\"{ 'form-check': to.formCheck !== 'custom', 'form-check-inline': to.formCheck === 'inline', 'custom-control custom-radio': to.formCheck === 'custom' }\"\n      >\n        <input type=\"radio\"\n          [id]=\"id + '_' + i\"\n          [class.form-check-input]=\"to.formCheck !== 'custom'\"\n          [class.custom-control-input]=\"to.formCheck === 'custom'\"\n          [name]=\"field.name || id\"\n          [class.is-invalid]=\"showError\"\n          [attr.value]=\"option.value\"\n          [value]=\"option.value\"\n          [formControl]=\"formControl\"\n          [formlyAttributes]=\"field\">\n        <label\n          [class.form-check-label]=\"to.formCheck !== 'custom'\"\n          [class.custom-control-label]=\"to.formCheck === 'custom'\"\n          [for]=\"id + '_' + i\">\n          {{ option.label }}\n        </label>\n      </div>\n    </div>\n  `,\n})\nexport class FormlyFieldRadio extends FieldType {\n  defaultOptions = {\n    templateOptions: {\n      options: [],\n      formCheck: 'custom', // 'custom' | 'stacked' | 'inline'\n    },\n  };\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from '@ngx-formly/core';\n\n@Component({\n  selector: 'formly-field-textarea',\n  template: `\n    <textarea [formControl]=\"formControl\" [cols]=\"to.cols\"\n      [rows]=\"to.rows\" class=\"form-control\" [class.is-invalid]=\"showError\"\n      [formlyAttributes]=\"field\">\n    </textarea>\n  `,\n})\nexport class FormlyFieldTextArea extends FieldType {\n  defaultOptions = {\n    templateOptions: {\n      cols: 1,\n      rows: 1,\n    },\n  };\n}\n","import { Component, ViewChild, NgZone } from '@angular/core';\nimport { SelectControlValueAccessor } from '@angular/forms';\nimport { FieldType } from '@ngx-formly/core';\nimport { take } from 'rxjs/operators';\n\n@Component({\n  selector: 'formly-field-select',\n  template: `\n    <select *ngIf=\"to.multiple; else singleSelect\" class=\"form-control\"\n      multiple\n      [class.custom-select]=\"to.customSelect\"\n      [formControl]=\"formControl\"\n      [compareWith]=\"to.compareWith || compareWith\"\n      [class.is-invalid]=\"showError\"\n      [formlyAttributes]=\"field\">\n      <ng-container *ngIf=\"to.options | formlySelectOptions:field | async as opts\">\n        <ng-container *ngIf=\"to._flatOptions else grouplist\">\n          <ng-container *ngFor=\"let opt of opts\">\n            <option [ngValue]=\"opt.value\" [disabled]=\"opt.disabled\">{{ opt.label }}</option>\n          </ng-container>\n        </ng-container>\n\n        <ng-template #grouplist>\n          <ng-container *ngFor=\"let opt of opts\">\n            <option *ngIf=\"!opt.group else optgroup\" [ngValue]=\"opt.value\" [disabled]=\"opt.disabled\">{{ opt.label }}</option>\n            <ng-template #optgroup>\n              <optgroup [label]=\"opt.label\">\n                <option *ngFor=\"let child of opt.group\" [ngValue]=\"child.value\" [disabled]=\"child.disabled\">\n                  {{ child.label }}\n                </option>\n              </optgroup>\n            </ng-template>\n          </ng-container>\n        </ng-template>\n      </ng-container>\n    </select>\n\n    <ng-template #singleSelect>\n      <select class=\"form-control\"\n        [formControl]=\"formControl\"\n        [compareWith]=\"to.compareWith || compareWith\"\n        [class.custom-select]=\"to.customSelect\"\n        [class.is-invalid]=\"showError\"\n        [formlyAttributes]=\"field\">\n        <option *ngIf=\"to.placeholder\" [ngValue]=\"null\">{{ to.placeholder }}</option>\n        <ng-container *ngIf=\"to.options | formlySelectOptions:field | async as opts\">\n          <ng-container *ngIf=\"to._flatOptions else grouplist\">\n            <ng-container *ngFor=\"let opt of opts\">\n              <option [ngValue]=\"opt.value\" [disabled]=\"opt.disabled\">{{ opt.label }}</option>\n            </ng-container>\n          </ng-container>\n\n          <ng-template #grouplist>\n            <ng-container *ngFor=\"let opt of opts\">\n              <option *ngIf=\"!opt.group else optgroup\" [ngValue]=\"opt.value\" [disabled]=\"opt.disabled\">{{ opt.label }}</option>\n              <ng-template #optgroup>\n                <optgroup [label]=\"opt.label\">\n                  <option *ngFor=\"let child of opt.group\" [ngValue]=\"child.value\" [disabled]=\"child.disabled\">\n                    {{ child.label }}\n                  </option>\n                </optgroup>\n              </ng-template>\n            </ng-container>\n          </ng-template>\n        </ng-container>\n      </select>\n    </ng-template>\n  `,\n})\nexport class FormlyFieldSelect extends FieldType {\n  defaultOptions = {\n    templateOptions: { options: [] },\n  };\n\n  // workaround for https://github.com/angular/angular/issues/10010\n  @ViewChild(SelectControlValueAccessor) set selectAccessor(s: any) {\n    if (!s) return;\n\n    const writeValue = s.writeValue.bind(s);\n    if (s._getOptionId(s.value) === null) {\n      writeValue(s.value);\n    }\n\n    s.writeValue = (value: any) => {\n      const id = s._idCounter;\n      writeValue(value);\n      if (value === null) {\n        this.ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n          if (id !== s._idCounter && s._getOptionId(value) === null && s._elementRef.nativeElement.selectedIndex !== -1) {\n            writeValue(value);\n          }\n        });\n      }\n    };\n  }\n\n  constructor(private ngZone: NgZone) {\n    super();\n  }\n\n  compareWith(o1: any, o2: any) {\n    return o1 === o2;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FieldWrapper } from '@ngx-formly/core';\n\n@Component({\n  selector: 'formly-wrapper-form-field',\n  template: `\n    <div class=\"form-group\" [class.has-error]=\"showError\">\n      <label *ngIf=\"to.label && to.hideLabel !== true\" [attr.for]=\"id\">\n        {{ to.label }}\n        <span *ngIf=\"to.required && to.hideRequiredMarker !== true\">*</span>\n      </label>\n\n      <ng-template #fieldComponent></ng-template>\n\n      <div *ngIf=\"showError\" class=\"invalid-feedback\" [style.display]=\"'block'\">\n        <formly-validation-message [field]=\"field\"></formly-validation-message>\n      </div>\n\n      <small *ngIf=\"to.description\" class=\"form-text text-muted\">{{ to.description }}</small>\n    </div>\n  `,\n})\nexport class FormlyWrapperFormField extends FieldWrapper {\n}\n","import { ConfigOption } from '@ngx-formly/core';\nimport {\n  FormlyFieldInput,\n  FormlyFieldCheckbox,\n  FormlyFieldRadio,\n  FormlyFieldSelect,\n  FormlyFieldTextArea,\n  FormlyFieldMultiCheckbox,\n} from './types/types';\nimport { FormlyWrapperFormField } from './wrappers/wrappers';\n\nexport const FIELD_TYPE_COMPONENTS = [\n  // types\n  FormlyFieldInput,\n  FormlyFieldCheckbox,\n  FormlyFieldRadio,\n  FormlyFieldSelect,\n  FormlyFieldTextArea,\n  FormlyFieldMultiCheckbox,\n\n  // wrappers\n  FormlyWrapperFormField,\n];\n\nexport const BOOTSTRAP_FORMLY_CONFIG: ConfigOption = {\n  types: [\n    {\n      name: 'input',\n      component: FormlyFieldInput,\n      wrappers: ['form-field'],\n    },\n    {\n      name: 'checkbox',\n      component: FormlyFieldCheckbox,\n      wrappers: ['form-field'],\n    },\n    {\n      name: 'radio',\n      component: FormlyFieldRadio,\n      wrappers: ['form-field'],\n    },\n    {\n      name: 'select',\n      component: FormlyFieldSelect,\n      wrappers: ['form-field'],\n    },\n    {\n      name: 'textarea',\n      component: FormlyFieldTextArea,\n      wrappers: ['form-field'],\n    },\n    {\n      name: 'multicheckbox',\n      component: FormlyFieldMultiCheckbox,\n      wrappers: ['form-field'],\n    },\n  ],\n  wrappers: [\n    {name: 'form-field', component: FormlyWrapperFormField },\n  ],\n};\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FormlyModule } from '@ngx-formly/core';\nimport { FormlySelectModule } from '@ngx-formly/core/select';\nimport { BOOTSTRAP_FORMLY_CONFIG, FIELD_TYPE_COMPONENTS } from './bootstrap.config';\nimport { FormlyBootstrapAddonsModule } from '@ngx-formly/bootstrap/addons';\n\n@NgModule({\n  declarations: [\n    FIELD_TYPE_COMPONENTS,\n  ],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormlySelectModule,\n    FormlyModule.forChild(BOOTSTRAP_FORMLY_CONFIG),\n    FormlyBootstrapAddonsModule,\n  ],\n})\nexport class FormlyBootstrapModule {}\n"],"names":[],"mappings":"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"}
