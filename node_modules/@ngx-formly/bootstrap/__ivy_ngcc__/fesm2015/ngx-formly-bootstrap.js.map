{"version":3,"sources":["D:/angularprojects/Employeesadding/node_modules/@ngx-formly/bootstrap/fesm2015/ngx-formly-bootstrap.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAUC;;;;;;;;;;;;;;;;;;;;0BAkBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA+CD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BA2BC;;;;;;;;;;;;;;;;;;;;;CAaD;;;;;;;;;;;;;0BAWC;;;;;;;;;;;;;;;;;;;;;;;;;;;CAgBD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BA6BC;;;;;;;;;;;;;;;;;;;;;;;;;CAgBD;;;;;;;;;;;;;0BAWC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA0DD,wUAkEC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAYD;;;;;;;;;;;;;;;;;;;;;;;0BAqBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAmED;;;;;;;;;;;;;;;;;;;;;;;;0BAcC","file":"ngx-formly-bootstrap.js","sourcesContent":["import { take } from 'rxjs/operators';\nimport { Component, ViewChild, NgZone, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SelectControlValueAccessor, ReactiveFormsModule } from '@angular/forms';\nimport { FieldType, FieldWrapper, FormlyModule } from '@ngx-formly/core';\nimport { FormlySelectModule } from '@ngx-formly/core/select';\nimport { FormlyBootstrapAddonsModule } from '@ngx-formly/bootstrap/addons';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyFieldCheckbox extends FieldType {\n    constructor() {\n        super(...arguments);\n        this.defaultOptions = {\n            templateOptions: {\n                indeterminate: true,\n                hideLabel: true,\n            },\n        };\n    }\n}\nFormlyFieldCheckbox.decorators = [\n    { type: Component, args: [{\n                selector: 'formly-field-checkbox',\n                template: `\n    <div class=\"custom-control custom-checkbox\">\n      <input class=\"custom-control-input\" type=\"checkbox\"\n        [class.is-invalid]=\"showError\"\n        [indeterminate]=\"to.indeterminate && formControl.value === null\"\n        [formControl]=\"formControl\"\n        [formlyAttributes]=\"field\">\n      <label class=\"custom-control-label\" [for]=\"id\">\n        {{ to.label }}\n        <span *ngIf=\"to.required && to.hideRequiredMarker !== true\">*</span>\n      </label>\n    </div>\n  `\n            }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyFieldMultiCheckbox extends FieldType {\n    constructor() {\n        super(...arguments);\n        this.defaultOptions = {\n            templateOptions: {\n                options: [],\n                formCheck: 'custom',\n            },\n        };\n    }\n    /**\n     * @param {?} value\n     * @param {?} checked\n     * @return {?}\n     */\n    onChange(value, checked) {\n        if (this.to.type === 'array') {\n            this.formControl.patchValue(checked\n                ? [...(this.formControl.value || []), value]\n                : [...(this.formControl.value || [])].filter((/**\n                 * @param {?} o\n                 * @return {?}\n                 */\n                o => o !== value)));\n        }\n        else {\n            this.formControl.patchValue(Object.assign({}, this.formControl.value, { [value]: checked }));\n        }\n        this.formControl.markAsTouched();\n    }\n    /**\n     * @param {?} option\n     * @return {?}\n     */\n    isChecked(option) {\n        /** @type {?} */\n        const value = this.formControl.value;\n        return value && (this.to.type === 'array'\n            ? (value.indexOf(option.value) !== -1)\n            : value[option.value]);\n    }\n}\nFormlyFieldMultiCheckbox.decorators = [\n    { type: Component, args: [{\n                selector: 'formly-field-multicheckbox',\n                template: `\n    <div>\n      <div *ngFor=\"let option of to.options | formlySelectOptions:field | async; let i = index;\"\n        [ngClass]=\"{ 'form-check': to.formCheck !== 'custom', 'form-check-inline': to.formCheck === 'inline', 'custom-control custom-checkbox': to.formCheck === 'custom' }\"\n      >\n        <input type=\"checkbox\"\n          [id]=\"id + '_' + i\"\n          [class.form-check-input]=\"to.formCheck !== 'custom'\"\n          [class.custom-control-input]=\"to.formCheck === 'custom'\"\n          [value]=\"option.value\"\n          [checked]=\"isChecked(option)\"\n          [formlyAttributes]=\"field\"\n          (change)=\"onChange(option.value, $event.target.checked)\">\n        <label\n          [class.form-check-label]=\"to.formCheck !== 'custom'\"\n          [class.custom-control-label]=\"to.formCheck === 'custom'\"\n          [for]=\"id + '_' + i\">\n          {{ option.label }}\n        </label>\n      </div>\n    <div>\n  `\n            }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyFieldInput extends FieldType {\n    /**\n     * @return {?}\n     */\n    get type() {\n        return this.to.type || 'text';\n    }\n}\nFormlyFieldInput.decorators = [\n    { type: Component, args: [{\n                selector: 'formly-field-input',\n                template: `\n    <input *ngIf=\"type !== 'number' else numberTmp\" [type]=\"type\" [formControl]=\"formControl\" class=\"form-control\" [formlyAttributes]=\"field\" [class.is-invalid]=\"showError\">\n    <ng-template #numberTmp>\n      <input type=\"number\" [formControl]=\"formControl\" class=\"form-control\" [formlyAttributes]=\"field\" [class.is-invalid]=\"showError\">\n    </ng-template>\n  `\n            }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyFieldRadio extends FieldType {\n    constructor() {\n        super(...arguments);\n        this.defaultOptions = {\n            templateOptions: {\n                options: [],\n                formCheck: 'custom',\n            },\n        };\n    }\n}\nFormlyFieldRadio.decorators = [\n    { type: Component, args: [{\n                selector: 'formly-field-radio',\n                template: `\n    <div>\n      <div *ngFor=\"let option of to.options | formlySelectOptions:field | async; let i = index;\"\n        [ngClass]=\"{ 'form-check': to.formCheck !== 'custom', 'form-check-inline': to.formCheck === 'inline', 'custom-control custom-radio': to.formCheck === 'custom' }\"\n      >\n        <input type=\"radio\"\n          [id]=\"id + '_' + i\"\n          [class.form-check-input]=\"to.formCheck !== 'custom'\"\n          [class.custom-control-input]=\"to.formCheck === 'custom'\"\n          [name]=\"field.name || id\"\n          [class.is-invalid]=\"showError\"\n          [attr.value]=\"option.value\"\n          [value]=\"option.value\"\n          [formControl]=\"formControl\"\n          [formlyAttributes]=\"field\">\n        <label\n          [class.form-check-label]=\"to.formCheck !== 'custom'\"\n          [class.custom-control-label]=\"to.formCheck === 'custom'\"\n          [for]=\"id + '_' + i\">\n          {{ option.label }}\n        </label>\n      </div>\n    </div>\n  `\n            }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyFieldTextArea extends FieldType {\n    constructor() {\n        super(...arguments);\n        this.defaultOptions = {\n            templateOptions: {\n                cols: 1,\n                rows: 1,\n            },\n        };\n    }\n}\nFormlyFieldTextArea.decorators = [\n    { type: Component, args: [{\n                selector: 'formly-field-textarea',\n                template: `\n    <textarea [formControl]=\"formControl\" [cols]=\"to.cols\"\n      [rows]=\"to.rows\" class=\"form-control\" [class.is-invalid]=\"showError\"\n      [formlyAttributes]=\"field\">\n    </textarea>\n  `\n            }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyFieldSelect extends FieldType {\n    /**\n     * @param {?} ngZone\n     */\n    constructor(ngZone) {\n        super();\n        this.ngZone = ngZone;\n        this.defaultOptions = {\n            templateOptions: { options: [] },\n        };\n    }\n    // workaround for https://github.com/angular/angular/issues/10010\n    /**\n     * @param {?} s\n     * @return {?}\n     */\n    set selectAccessor(s) {\n        if (!s)\n            return;\n        /** @type {?} */\n        const writeValue = s.writeValue.bind(s);\n        if (s._getOptionId(s.value) === null) {\n            writeValue(s.value);\n        }\n        s.writeValue = (/**\n         * @param {?} value\n         * @return {?}\n         */\n        (value) => {\n            /** @type {?} */\n            const id = s._idCounter;\n            writeValue(value);\n            if (value === null) {\n                this.ngZone.onStable.asObservable().pipe(take(1)).subscribe((/**\n                 * @return {?}\n                 */\n                () => {\n                    if (id !== s._idCounter && s._getOptionId(value) === null && s._elementRef.nativeElement.selectedIndex !== -1) {\n                        writeValue(value);\n                    }\n                }));\n            }\n        });\n    }\n    /**\n     * @param {?} o1\n     * @param {?} o2\n     * @return {?}\n     */\n    compareWith(o1, o2) {\n        return o1 === o2;\n    }\n}\nFormlyFieldSelect.decorators = [\n    { type: Component, args: [{\n                selector: 'formly-field-select',\n                template: `\n    <select *ngIf=\"to.multiple; else singleSelect\" class=\"form-control\"\n      multiple\n      [class.custom-select]=\"to.customSelect\"\n      [formControl]=\"formControl\"\n      [compareWith]=\"to.compareWith || compareWith\"\n      [class.is-invalid]=\"showError\"\n      [formlyAttributes]=\"field\">\n      <ng-container *ngIf=\"to.options | formlySelectOptions:field | async as opts\">\n        <ng-container *ngIf=\"to._flatOptions else grouplist\">\n          <ng-container *ngFor=\"let opt of opts\">\n            <option [ngValue]=\"opt.value\" [disabled]=\"opt.disabled\">{{ opt.label }}</option>\n          </ng-container>\n        </ng-container>\n\n        <ng-template #grouplist>\n          <ng-container *ngFor=\"let opt of opts\">\n            <option *ngIf=\"!opt.group else optgroup\" [ngValue]=\"opt.value\" [disabled]=\"opt.disabled\">{{ opt.label }}</option>\n            <ng-template #optgroup>\n              <optgroup [label]=\"opt.label\">\n                <option *ngFor=\"let child of opt.group\" [ngValue]=\"child.value\" [disabled]=\"child.disabled\">\n                  {{ child.label }}\n                </option>\n              </optgroup>\n            </ng-template>\n          </ng-container>\n        </ng-template>\n      </ng-container>\n    </select>\n\n    <ng-template #singleSelect>\n      <select class=\"form-control\"\n        [formControl]=\"formControl\"\n        [compareWith]=\"to.compareWith || compareWith\"\n        [class.custom-select]=\"to.customSelect\"\n        [class.is-invalid]=\"showError\"\n        [formlyAttributes]=\"field\">\n        <option *ngIf=\"to.placeholder\" [ngValue]=\"null\">{{ to.placeholder }}</option>\n        <ng-container *ngIf=\"to.options | formlySelectOptions:field | async as opts\">\n          <ng-container *ngIf=\"to._flatOptions else grouplist\">\n            <ng-container *ngFor=\"let opt of opts\">\n              <option [ngValue]=\"opt.value\" [disabled]=\"opt.disabled\">{{ opt.label }}</option>\n            </ng-container>\n          </ng-container>\n\n          <ng-template #grouplist>\n            <ng-container *ngFor=\"let opt of opts\">\n              <option *ngIf=\"!opt.group else optgroup\" [ngValue]=\"opt.value\" [disabled]=\"opt.disabled\">{{ opt.label }}</option>\n              <ng-template #optgroup>\n                <optgroup [label]=\"opt.label\">\n                  <option *ngFor=\"let child of opt.group\" [ngValue]=\"child.value\" [disabled]=\"child.disabled\">\n                    {{ child.label }}\n                  </option>\n                </optgroup>\n              </ng-template>\n            </ng-container>\n          </ng-template>\n        </ng-container>\n      </select>\n    </ng-template>\n  `\n            }] }\n];\n/** @nocollapse */\nFormlyFieldSelect.ctorParameters = () => [\n    { type: NgZone }\n];\nFormlyFieldSelect.propDecorators = {\n    selectAccessor: [{ type: ViewChild, args: [SelectControlValueAccessor,] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyWrapperFormField extends FieldWrapper {\n}\nFormlyWrapperFormField.decorators = [\n    { type: Component, args: [{\n                selector: 'formly-wrapper-form-field',\n                template: `\n    <div class=\"form-group\" [class.has-error]=\"showError\">\n      <label *ngIf=\"to.label && to.hideLabel !== true\" [attr.for]=\"id\">\n        {{ to.label }}\n        <span *ngIf=\"to.required && to.hideRequiredMarker !== true\">*</span>\n      </label>\n\n      <ng-template #fieldComponent></ng-template>\n\n      <div *ngIf=\"showError\" class=\"invalid-feedback\" [style.display]=\"'block'\">\n        <formly-validation-message [field]=\"field\"></formly-validation-message>\n      </div>\n\n      <small *ngIf=\"to.description\" class=\"form-text text-muted\">{{ to.description }}</small>\n    </div>\n  `\n            }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst FIELD_TYPE_COMPONENTS = [\n    // types\n    FormlyFieldInput,\n    FormlyFieldCheckbox,\n    FormlyFieldRadio,\n    FormlyFieldSelect,\n    FormlyFieldTextArea,\n    FormlyFieldMultiCheckbox,\n    // wrappers\n    FormlyWrapperFormField,\n];\n/** @type {?} */\nconst BOOTSTRAP_FORMLY_CONFIG = {\n    types: [\n        {\n            name: 'input',\n            component: FormlyFieldInput,\n            wrappers: ['form-field'],\n        },\n        {\n            name: 'checkbox',\n            component: FormlyFieldCheckbox,\n            wrappers: ['form-field'],\n        },\n        {\n            name: 'radio',\n            component: FormlyFieldRadio,\n            wrappers: ['form-field'],\n        },\n        {\n            name: 'select',\n            component: FormlyFieldSelect,\n            wrappers: ['form-field'],\n        },\n        {\n            name: 'textarea',\n            component: FormlyFieldTextArea,\n            wrappers: ['form-field'],\n        },\n        {\n            name: 'multicheckbox',\n            component: FormlyFieldMultiCheckbox,\n            wrappers: ['form-field'],\n        },\n    ],\n    wrappers: [\n        { name: 'form-field', component: FormlyWrapperFormField },\n    ],\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyBootstrapModule {\n}\nFormlyBootstrapModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [\n                    FIELD_TYPE_COMPONENTS,\n                ],\n                imports: [\n                    CommonModule,\n                    ReactiveFormsModule,\n                    FormlySelectModule,\n                    FormlyModule.forChild(BOOTSTRAP_FORMLY_CONFIG),\n                    FormlyBootstrapAddonsModule,\n                ],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { FormlyBootstrapModule, FormlyFieldCheckbox, FormlyFieldMultiCheckbox, FormlyFieldInput, FormlyFieldRadio, FormlyFieldTextArea, FormlyFieldSelect, FormlyWrapperFormField, BOOTSTRAP_FORMLY_CONFIG as ɵb, FIELD_TYPE_COMPONENTS as ɵa };\n"]}