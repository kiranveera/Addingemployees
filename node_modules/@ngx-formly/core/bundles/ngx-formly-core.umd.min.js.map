{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@ngx-formly/core/lib/utils.ts","ng://@ngx-formly/core/lib/services/formly.config.ts","ng://@ngx-formly/core/lib/services/formly.form.builder.ts","ng://@ngx-formly/core/lib/components/formly.form.ts","ng://@ngx-formly/core/lib/components/formly.field.ts","ng://@ngx-formly/core/lib/components/formly.attributes.ts","ng://@ngx-formly/core/lib/templates/field.type.ts","ng://@ngx-formly/core/lib/extensions/field-form/utils.ts","ng://@ngx-formly/core/lib/templates/field-array.type.ts","ng://@ngx-formly/core/lib/templates/field.wrapper.ts","ng://@ngx-formly/core/lib/templates/formly.group.ts","ng://@ngx-formly/core/lib/templates/formly.validation-message.ts","ng://@ngx-formly/core/lib/templates/field-template.type.ts","ng://@ngx-formly/core/lib/extensions/field-expression/utils.ts","ng://@ngx-formly/core/lib/extensions/field-expression/field-expression.ts","ng://@ngx-formly/core/lib/extensions/field-validation/field-validation.ts","ng://@ngx-formly/core/lib/extensions/field-form/field-form.ts","ng://@ngx-formly/core/lib/extensions/core/core.ts","ng://@ngx-formly/core/lib/core.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__values","o","m","Symbol","iterator","next","value","done","__read","r","e","ar","push","error","__spread","concat","getKeyPath","field","key","_keyPath","indexOf","replace","path","split","slice","FORMLY_VALIDATORS","assignModelValue","model","paths","isObject","test","clone","getFieldValue","parent","_b","tslib_1.__values","_c","reverseDeepMerge","dest","args","_i","forEach","src","srcArg","isNullOrUndefined","obj1","obj2","getPrototypeOf","isArray","undefined","isUndefined","isFunction","x","isObservable","changingThisBreaksApplicationSecurity","name","_isAMomentObject","AbstractControl","Date","getTime","map","v","proto","c","keys","reduce","newVal","prop","propDesc","getOwnPropertyDescriptor","get","defineProperty","defineHiddenProp","defaultValue","enumerable","writable","configurable","wrapProperty","setFn","_observers","fns","currentValue","firstChange","set","previousValue_1","changeFn","previousValue","splice","reduceFormUpdateValidityCalls","form","action","updateValidity","_updateTreeValidity","bind","updateValidityArgs","FORMLY_CONFIG","InjectionToken","FormlyConfig","types","validators","wrappers","messages","templateManipulators","preWrapper","postWrapper","extras","checkExpressionOn","showError","formControl","invalid","touched","options","parentForm","submitted","validation","show","extensions","addConfig","config","_this","type","setType","validator","setValidator","wrapper","setWrapper","manipulators","console","warn","manipulator","setManipulator","validationMessages","addValidatorMessage","message","extension","option","setTypeWrapper","getType","Error","mergeExtendedType","getMergedField","defaultOptions","extendDefaults","extends","optionsTypes","componentRef","resolveFieldTypeRef","instance","component","_a","_resolver","_injector","resolveComponentFactory","getWrapper","getValidator","getValidatorMessage","class","method","extendedType","Injectable","providedIn","FormlyFormBuilder","formlyConfig","componentFactoryResolver","injector","buildForm","fieldGroup","core","_setOptions","_buildForm","_checkField","getExtensions","prePopulate","onPopulate","f","postPopulate","formState","fieldChanges","Subject","_hiddenFieldsForCheck","_markForCheck","_componentRefs","ref","changeDetectorRef","markForCheck","ComponentFactoryResolver","Injector","FormlyForm","formlyBuilder","ngZone","immutable","parentFormGroup","modelChange","EventEmitter","_modelChangeValue","modelChangeSubs","modelChange$","modelChangeSub","pipe","switchMap","onStable","asObservable","take","subscribe","runGuarded","checkExpressionChange","emit","_model","_fields","fields","_options","content","nativeElement","nextSibling","ngDoCheck","ngOnChanges","changes","FormGroup","setOptions","updateInitialValue","clearModelSubscriptions","trackModelChanges","ngOnDestroy","unsubscribe","changeModel","k","pop","resetModel","_initialModel","control","resetForm","reset","emitModelChange","rootKey","control_1","valueChanges","distinctUntilChanged","modelOptions","updateOn","debounce","default","debounceTime","FormControl","patchValue","emitEvent","onlySelf","parsers","parserFn","tslib_1.__spread","join","observers","unshift","sub","Component","selector","template","providers","NgZone","Attribute","FormGroupDirective","decorators","Optional","Input","Output","ViewChild","FormlyField","renderer","resolver","elementRef","hideDeprecation","warnDeprecation","hostObservers","componentRefs","ngAfterContentInit","triggerHook","ngAfterContentChecked","ngAfterViewInit","ngAfterViewChecked","ngOnInit","resetRefs","renderField","containerRef","clear","wps_1","ref_1","createComponent","attachComponentRef","viewRef","detach","destroyed","insert","detectChanges","hooks","lifecycle","renderHostBinding","setStyle","setAttribute","filter","Renderer2","ElementRef","read","ViewContainerRef","static","FormlyAttributes","_document","uiAttributesCache","uiAttributes","uiEvents","listeners","events","document","templateOptions","listener","eventName","to","listen","attributes","attr","removeAttribute","detachElementRef","attachElementRef","fieldAttrElements","id","toggleFocus","element","focus","isFocused","activeElement","some","contains","blur","onFocus","$event","onBlur","onChange","change","markAsDirty","index","Directive","host","(focus)","(blur)","(change)","Inject","DOCUMENT","FieldType","Field","_super","tslib_1.__extends","unregisterControl","opts","FormArray","key_1","controls","findIndex","updateControl","removeAt","key_2","removeControl","setParent","disabled","registerControl","disable","enable","registerOnDisabledChange","_hide","setControl","_forEachChild","cb","updateValueAndValidity","FieldArrayType","builder","fieldArray","add","initialModel","remove","FieldWrapper","FormlyGroup","[class]","FormlyValidationMessage","errorMessage$","statusChanges","startWith","errorMessage","fieldForm","errors","errorPath","asyncValidators","changeDetection","ChangeDetectionStrategy","OnPush","FormlyTemplateType","evalExpression","expression","thisArg","argVal","Function","FieldExpressionExtension","ignoreCache","checkField","_expressionProperties","expressionProperties","expressionProperty","expressionValueSetter","evalExpressionValueSetter","argNames","this_1","_evalExpression","Observable","subscription_1","setExprValue","onDestroy_1","onDestroy","hideExpression","hide","parent_1","parentExpression","evalStringExpression","sort","toggleFormControl","checkFieldExpressionChange","checkFieldVisibilityChange","expressionValue","JSON","stringify","setter","hideExpressionResult","hidden","setDisabledState","every","FieldValidationExtension","initFieldValidation","getPredefinedFieldValidation","validatorName","wrapNgValidatorFn","Validators","compose","composeAsync","VALIDATORS","opt","required","pattern","minLength","maxLength","min","max","validatorFn","isValid","isPromise","obj","then","result","handleResult","controlErrors","setErrors","_d","FieldFormExtension","addFormControl","setValidators","findControl","controlOptions","componentType","c_1","enabled","asyncValidator","_validators","setAsyncValidators","_asyncValidators","of","CoreExtension","formId","getFieldComponentInstance","fieldTransforms","fieldTransform","initFieldOptions","root","getFieldId","label","placeholder","initFieldWrappers","fieldTemplateManipulators","el","a","defaultFormlyConfig","FormlyModule","configService","configs","forRoot","ngModule","provide","multi","useFactory","deps","useValue","ANALYZE_FOR_ENTRY_COMPONENTS","forChild","NgModule","declarations","entryComponents","exports","imports","CommonModule","getFieldInitialValue","paths_1","paths_1_1"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { FormlyFieldConfig } from './core';\nimport { isObservable } from 'rxjs';\nimport { AbstractControl } from '@angular/forms';\nimport { FormlyFieldConfigCache } from './components/formly.field.config';\n\nexport function getFieldId(formId: string, field: FormlyFieldConfig, index: string|number) {\n  if (field.id) return field.id;\n  let type = field.type;\n  if (!type && field.template) type = 'template';\n  return [formId, type, field.key, index].join('_');\n}\n\nexport function getKeyPath(field: FormlyFieldConfigCache): string[] {\n  if (!field.key) {\n    return [];\n  }\n\n  /* We store the keyPath in the field for performance reasons. This function will be called frequently. */\n  if (!field._keyPath || field._keyPath.key !== field.key) {\n    const key = field.key.indexOf('[') === -1\n      ? field.key\n      : field.key.replace(/\\[(\\w+)\\]/g, '.$1');\n\n    field._keyPath = { key: field.key, path: key.indexOf('.') !== -1 ? key.split('.') : [key] };\n  }\n\n  return field._keyPath.path.slice(0);\n}\n\nexport const FORMLY_VALIDATORS = ['required', 'pattern', 'minLength', 'maxLength', 'min', 'max'];\n\nexport function assignModelValue(model: any, paths: string[], value: any) {\n  for (let i = 0; i < (paths.length - 1); i++) {\n    const path = paths[i];\n    if (!model[path] || !isObject(model[path])) {\n      model[path] = /^\\d+$/.test(paths[i + 1]) ? [] : {};\n    }\n\n    model = model[path];\n  }\n\n  model[paths[paths.length - 1]] = clone(value);\n}\n\nexport function getFieldInitialValue(field: FormlyFieldConfig) {\n  let value = field.options['_initialModel'];\n  let paths = getKeyPath(field);\n  while (field.parent) {\n    field = field.parent;\n    paths = [...getKeyPath(field), ...paths];\n  }\n\n  for (const path of paths) {\n    if (!value) {\n      return undefined;\n    }\n    value = value[path];\n  }\n\n  return value;\n}\n\nexport function getFieldValue(field: FormlyFieldConfig): any {\n  let model = field.parent.model;\n  for (const path of getKeyPath(field)) {\n    if (!model) {\n      return model;\n    }\n    model = model[path];\n  }\n\n  return model;\n}\n\nexport function reverseDeepMerge(dest: any, ...args: any[]) {\n  args.forEach(src => {\n    for (let srcArg in src) {\n      if (isNullOrUndefined(dest[srcArg]) || isBlankString(dest[srcArg])) {\n        dest[srcArg] = clone(src[srcArg]);\n      } else if (objAndSameType(dest[srcArg], src[srcArg])) {\n        reverseDeepMerge(dest[srcArg], src[srcArg]);\n      }\n    }\n  });\n  return dest;\n}\n\nexport function isNullOrUndefined(value: any) {\n  return value === undefined || value === null;\n}\n\nexport function isUndefined(value: any) {\n  return value === undefined;\n}\n\nexport function isBlankString(value: any) {\n  return value === '';\n}\n\nexport function isFunction(value: any) {\n  return typeof(value) === 'function';\n}\n\nexport function objAndSameType(obj1: any, obj2: any) {\n  return isObject(obj1) && isObject(obj2)\n    && Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2)\n    && !(Array.isArray(obj1) || Array.isArray(obj2));\n}\n\nexport function isObject(x: any) {\n  return x != null && typeof x === 'object';\n}\n\nexport function isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nexport function clone(value: any): any {\n  if (\n    !isObject(value)\n    || isObservable(value)\n    || /* instanceof SafeHtmlImpl */ value.changingThisBreaksApplicationSecurity\n    || ['RegExp', 'FileList', 'File', 'Blob'].indexOf(value.constructor.name) !== -1\n  ) {\n    return value;\n  }\n\n  // https://github.com/moment/moment/blob/master/moment.js#L252\n  if (value._isAMomentObject && isFunction(value.clone)) {\n    return value.clone();\n  }\n\n  if (value instanceof AbstractControl) {\n    return null;\n  }\n\n  if (value instanceof Date) {\n    return new Date(value.getTime());\n  }\n\n  if (Array.isArray(value)) {\n    return value.slice(0).map(v => clone(v));\n  }\n\n  // best way to clone a js object maybe\n  // https://stackoverflow.com/questions/41474986/how-to-clone-a-javascript-es6-class-instance\n  const proto = Object.getPrototypeOf(value);\n  let c = Object.create(proto);\n  c = Object.setPrototypeOf(c, proto);\n  // need to make a deep copy so we dont use Object.assign\n  // also Object.assign wont copy property descriptor exactly\n  return Object.keys(value).reduce((newVal, prop) => {\n    const propDesc = Object.getOwnPropertyDescriptor(value, prop);\n    if (propDesc.get) {\n      Object.defineProperty(newVal, prop, propDesc);\n    } else {\n      newVal[prop] = clone(value[prop]);\n    }\n\n    return newVal;\n  }, c);\n}\n\nexport function defineHiddenProp(field: any, prop: string, defaultValue: any) {\n  Object.defineProperty(field, prop, { enumerable: false, writable: true, configurable: true });\n  field[prop] = defaultValue;\n}\n\nexport function wrapProperty<T = any>(\n  o: any,\n  prop: string,\n  setFn: (change: {currentValue: T, previousValue?: T, firstChange: boolean}) => void,\n) {\n  if (!o._observers) {\n    defineHiddenProp(o, '_observers', {});\n  }\n\n  if (!o._observers[prop]) {\n    o._observers[prop] = [];\n  }\n\n  let fns: typeof setFn[] = o._observers[prop];\n  if (fns.indexOf(setFn) === -1) {\n    fns.push(setFn);\n    setFn({ currentValue: o[prop], firstChange: true });\n    if (fns.length === 1) {\n      defineHiddenProp(o, `___$${prop}`, o[prop]);\n      Object.defineProperty(o, prop, {\n        configurable: true,\n        get: () => o[`___$${prop}`],\n        set: currentValue => {\n          if (currentValue !== o[`___$${prop}`]) {\n            const previousValue = o[`___$${prop}`];\n            o[`___$${prop}`] = currentValue;\n            fns.forEach(changeFn => changeFn({ previousValue, currentValue, firstChange: false }));\n          }\n        },\n      });\n    }\n  }\n\n  return () => fns.splice(fns.indexOf(setFn), 1);\n}\n\nexport function reduceFormUpdateValidityCalls(form: any, action: Function) {\n  const updateValidity = form._updateTreeValidity.bind(form);\n\n  let updateValidityArgs = null;\n  form._updateTreeValidity = (...args) => updateValidityArgs = args;\n  action();\n\n  updateValidityArgs && updateValidity(updateValidityArgs);\n  form._updateTreeValidity = updateValidity;\n}\n","import { Injectable, InjectionToken, ComponentRef } from '@angular/core';\nimport { ValidationErrors, AbstractControl } from '@angular/forms';\nimport { FieldType } from './../templates/field.type';\nimport { reverseDeepMerge, defineHiddenProp } from './../utils';\nimport { FormlyFieldConfig, FormlyFieldConfigCache } from '../components/formly.field.config';\n\nexport const FORMLY_CONFIG = new InjectionToken<FormlyConfig>('FORMLY_CONFIG');\n\n/** @experimental */\nexport interface FormlyExtension {\n  prePopulate?(field: FormlyFieldConfig): void;\n  onPopulate?(field: FormlyFieldConfig): void;\n  postPopulate?(field: FormlyFieldConfig): void;\n}\n\n/**\n * Maintains list of formly field directive types. This can be used to register new field templates.\n */\n@Injectable({ providedIn: 'root' })\nexport class FormlyConfig {\n  types: {[name: string]: TypeOption} = {};\n  validators: { [name: string]: ValidatorOption } = {};\n  wrappers: { [name: string]: WrapperOption } = {};\n  messages: { [name: string]: string | ((error: any, field: FormlyFieldConfig) => string); } = {};\n  templateManipulators: {\n    preWrapper: ManipulatorWrapper[];\n    postWrapper: ManipulatorWrapper[];\n  } = {\n    preWrapper: [],\n    postWrapper: [],\n  };\n  extras: ConfigOption['extras'] = {\n    checkExpressionOn: 'changeDetectionCheck',\n    showError: function(field: FieldType) {\n      return field.formControl && field.formControl.invalid && (field.formControl.touched || (field.options.parentForm && field.options.parentForm.submitted) || (field.field.validation && field.field.validation.show));\n    },\n  };\n  extensions: { [name: string]: FormlyExtension } = {};\n\n  addConfig(config: ConfigOption) {\n    if (config.types) {\n      config.types.forEach(type => this.setType(type));\n    }\n    if (config.validators) {\n      config.validators.forEach(validator => this.setValidator(validator));\n    }\n    if (config.wrappers) {\n      config.wrappers.forEach(wrapper => this.setWrapper(wrapper));\n    }\n    if (config.manipulators) {\n      console.warn(`NgxFormly: passing 'manipulators' config is deprecated, use custom extension instead.`);\n      config.manipulators.forEach(manipulator => this.setManipulator(manipulator));\n    }\n    if (config.validationMessages) {\n      config.validationMessages.forEach(validation => this.addValidatorMessage(validation.name, validation.message));\n    }\n    if (config.extensions) {\n      config.extensions.forEach(c => this.extensions[c.name] = c.extension);\n    }\n    if (config.extras) {\n      this.extras = { ...this.extras, ...config.extras };\n    }\n  }\n\n  setType(options: TypeOption | TypeOption[]) {\n    if (Array.isArray(options)) {\n      options.forEach((option) => this.setType(option));\n    } else {\n      if (!this.types[options.name]) {\n        this.types[options.name] = <TypeOption>{ name: options.name };\n      }\n\n      ['component', 'extends', 'defaultOptions'].forEach(prop => {\n        if (options.hasOwnProperty(prop)) {\n          this.types[options.name][prop] = options[prop];\n        }\n      });\n\n      if (options.wrappers) {\n        options.wrappers.forEach((wrapper) => this.setTypeWrapper(options.name, wrapper));\n      }\n    }\n  }\n\n  getType(name: string): TypeOption {\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n\n    return this.types[name];\n  }\n\n  getMergedField(field: FormlyFieldConfig = {}): any {\n    const type = this.getType(field.type);\n    if (type.defaultOptions) {\n      reverseDeepMerge(field, type.defaultOptions);\n    }\n\n    const extendDefaults = type.extends && this.getType(type.extends).defaultOptions;\n    if (extendDefaults) {\n      reverseDeepMerge(field, extendDefaults);\n    }\n\n    if (field && field.optionsTypes) {\n      field.optionsTypes.forEach(option => {\n        const defaultOptions = this.getType(option).defaultOptions;\n        if (defaultOptions) {\n          reverseDeepMerge(field, defaultOptions);\n        }\n      });\n    }\n\n    const componentRef = this.resolveFieldTypeRef(field);\n    if (componentRef && componentRef.instance && componentRef.instance.defaultOptions) {\n      reverseDeepMerge(field, componentRef.instance.defaultOptions);\n    }\n\n    if (!field.wrappers && type.wrappers) {\n      field.wrappers = [...type.wrappers];\n    }\n  }\n\n  /** @internal */\n  resolveFieldTypeRef(field: FormlyFieldConfigCache = {}): ComponentRef<FieldType> {\n    if (!field.type) {\n      return null;\n    }\n\n    const type = this.getType(field.type);\n    if (!type.component || type['_componentRef']) {\n      return type['_componentRef'];\n    }\n\n    const { _resolver, _injector } = field.parent.options;\n    defineHiddenProp(\n      type,\n      '_componentRef',\n      _resolver.resolveComponentFactory<FieldType>(type.component).create(_injector),\n    );\n\n    return type['_componentRef'];\n  }\n\n  setWrapper(options: WrapperOption) {\n    this.wrappers[options.name] = options;\n    if (options.types) {\n      options.types.forEach((type) => {\n        this.setTypeWrapper(type, options.name);\n      });\n    }\n  }\n\n  getWrapper(name: string): WrapperOption {\n    if (!this.wrappers[name]) {\n      throw new Error(`[Formly Error] There is no wrapper by the name of \"${name}\"`);\n    }\n\n    return this.wrappers[name];\n  }\n\n  setTypeWrapper(type: string, name: string) {\n    if (!this.types[type]) {\n      this.types[type] = <TypeOption>{};\n    }\n    if (!this.types[type].wrappers) {\n      this.types[type].wrappers = [];\n    }\n    if (this.types[type].wrappers.indexOf(name) === -1) {\n      this.types[type].wrappers.push(name);\n    }\n  }\n\n  setValidator(options: ValidatorOption) {\n    this.validators[options.name] = options;\n  }\n\n  getValidator(name: string): ValidatorOption {\n    if (!this.validators[name]) {\n      throw new Error(`[Formly Error] There is no validator by the name of \"${name}\"`);\n    }\n\n    return this.validators[name];\n  }\n\n  addValidatorMessage(name: string, message: string | ((error: any, field: FormlyFieldConfig) => string)) {\n    this.messages[name] = message;\n  }\n\n  getValidatorMessage(name: string) {\n    return this.messages[name];\n  }\n\n  setManipulator(manipulator: ManipulatorOption) {\n    new manipulator.class()[manipulator.method](this);\n  }\n\n  private mergeExtendedType(name: string) {\n    if (!this.types[name].extends) {\n      return;\n    }\n\n    const extendedType = this.getType(this.types[name].extends);\n    if (!this.types[name].component) {\n      this.types[name].component = extendedType.component;\n    }\n\n    if (!this.types[name].wrappers) {\n      this.types[name].wrappers = extendedType.wrappers;\n    }\n  }\n}\nexport interface TypeOption {\n  name: string;\n  component?: any;\n  wrappers?: string[];\n  extends?: string;\n  defaultOptions?: FormlyFieldConfig;\n}\n\nexport interface WrapperOption {\n  name: string;\n  component: any;\n  types?: string[];\n}\n\nexport interface FieldValidatorFn {\n  (c: AbstractControl, field: FormlyFieldConfig): ValidationErrors | null;\n}\n\nexport interface ValidatorOption {\n  name: string;\n  validation: FieldValidatorFn;\n}\n\nexport interface ExtensionOption {\n  name: string;\n  extension: FormlyExtension;\n}\n\nexport interface ValidationMessageOption {\n  name: string;\n  message: string | ((error: any, field: FormlyFieldConfig) => string);\n}\n\nexport interface ManipulatorOption {\n  class?: { new (): any };\n  method?: string;\n}\n\nexport interface ManipulatorWrapper {\n  (f: FormlyFieldConfig): string;\n}\n\nexport interface TemplateManipulators {\n  preWrapper?: ManipulatorWrapper[];\n  postWrapper?: ManipulatorWrapper[];\n}\n\nexport interface ConfigOption {\n  types?: TypeOption[];\n  wrappers?: WrapperOption[];\n  validators?: ValidatorOption[];\n  extensions?: ExtensionOption[];\n  validationMessages?: ValidationMessageOption[];\n\n  /** @deprecated use `extensions` instead */\n  manipulators?: ManipulatorOption[];\n  extras?: {\n    /** @deprecated use `extensions` instead */\n    fieldTransform?: any,\n    immutable?: boolean,\n    showError?: (field: FieldType) => boolean;\n\n    /**\n     * Defines the option which formly rely on to check field expression properties.\n     * - `modelChange`: perform a check when the value of the form control changes.\n     * - `changeDetectionCheck`: triggers an immediate check when `ngDoCheck` is called.\n    */\n    checkExpressionOn?: 'modelChange' | 'changeDetectionCheck',\n  };\n}\n","import { Injectable, ComponentFactoryResolver, Injector } from '@angular/core';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { FormlyConfig } from './formly.config';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyFieldConfigCache, FormlyValueChangeEvent, FormlyFormOptionsCache } from '../components/formly.field.config';\nimport { Subject } from 'rxjs';\nimport { defineHiddenProp, reduceFormUpdateValidityCalls } from '../utils';\n\n@Injectable({ providedIn: 'root' })\nexport class FormlyFormBuilder {\n  constructor(\n    private formlyConfig: FormlyConfig,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private injector: Injector,\n  ) {}\n\n  buildForm(formControl: FormGroup | FormArray, fieldGroup: FormlyFieldConfig[] = [], model: any, options: FormlyFormOptions) {\n    if (!this.formlyConfig.extensions.core) {\n      throw new Error('NgxFormly: missing `forRoot()` call. use `forRoot()` when registering the `FormlyModule`.');\n    }\n\n    const field = { fieldGroup, model, formControl, options: this._setOptions(options) };\n    reduceFormUpdateValidityCalls(formControl, () => this._buildForm(field));\n    field.options._checkField(field, true);\n  }\n\n  private _buildForm(field: FormlyFieldConfigCache) {\n    this.getExtensions().forEach(extension => extension.prePopulate && extension.prePopulate(field));\n    this.getExtensions().forEach(extension => extension.onPopulate && extension.onPopulate(field));\n\n    if (field.fieldGroup) {\n      field.fieldGroup.forEach((f) => this._buildForm(f));\n    }\n\n    this.getExtensions().forEach(extension => extension.postPopulate && extension.postPopulate(field));\n  }\n\n  private getExtensions() {\n    return Object.keys(this.formlyConfig.extensions).map(name => this.formlyConfig.extensions[name]);\n  }\n\n  private _setOptions(options: FormlyFormOptionsCache) {\n    options = options || {};\n    options.formState = options.formState || {};\n\n    if (!options.showError) {\n      options.showError = this.formlyConfig.extras.showError;\n    }\n\n    if (!options.fieldChanges) {\n      defineHiddenProp(options, 'fieldChanges', new Subject<FormlyValueChangeEvent>());\n    }\n\n    if (!options._resolver) {\n      defineHiddenProp(options, '_resolver', this.componentFactoryResolver);\n    }\n\n    if (!options._injector) {\n      defineHiddenProp(options, '_injector', this.injector);\n    }\n\n    if (!options._hiddenFieldsForCheck) {\n      options._hiddenFieldsForCheck = [];\n    }\n\n    if (!options._markForCheck) {\n      options._markForCheck = (field) => {\n        if (field._componentRefs) {\n          field._componentRefs.forEach(ref => ref.changeDetectorRef.markForCheck());\n        }\n\n        if (field.fieldGroup) {\n          field.fieldGroup.forEach(f => options._markForCheck(f));\n        }\n      };\n    }\n\n    return options;\n  }\n}\n","import { Component, DoCheck, OnChanges, Input, SimpleChanges, Optional, EventEmitter, Output, OnDestroy, Attribute, ViewChild, ElementRef, NgZone } from '@angular/core';\nimport { FormGroup, FormArray, FormGroupDirective, FormControl } from '@angular/forms';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyFormOptionsCache } from './formly.field.config';\nimport { FormlyFormBuilder } from '../services/formly.form.builder';\nimport { FormlyConfig } from '../services/formly.config';\nimport { assignModelValue, isNullOrUndefined, wrapProperty, clone, defineHiddenProp, getKeyPath } from '../utils';\nimport { Subscription, Subject } from 'rxjs';\nimport { debounceTime, switchMap, distinctUntilChanged, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'formly-form',\n  template: `\n    <formly-field *ngFor=\"let field of fields\"\n      hide-deprecation\n      [form]=\"field.form\"\n      [options]=\"field.options\"\n      [model]=\"field.model\"\n      [field]=\"field\">\n    </formly-field>\n    <ng-container #content>\n      <ng-content></ng-content>\n    </ng-container>\n  `,\n  providers: [FormlyFormBuilder],\n})\nexport class FormlyForm implements DoCheck, OnChanges, OnDestroy {\n  @Input() form: FormGroup | FormArray;\n\n  @Input()\n  set model(model: any) { this._model = this.immutable ? clone(model) : model; }\n  get model() { return this._model || {}; }\n\n  @Input()\n  set fields(fields: FormlyFieldConfig[]) { this._fields = this.immutable ? clone(fields) : fields; }\n  get fields() { return this._fields || []; }\n\n  @Input()\n  set options(options: FormlyFormOptions) { this._options = this.immutable ? clone(options) : options; }\n  get options() { return this._options; }\n\n  @Output() modelChange = new EventEmitter<any>();\n  @ViewChild('content') set content(content: ElementRef<HTMLElement>) {\n    if (content && content.nativeElement.nextSibling) {\n      console.warn(`NgxFormly: content projection for 'formly-form' component is deprecated since v5.5, you should avoid passing content inside the 'formly-form' tag.`);\n    }\n  }\n\n  private immutable = false;\n  private _model: any;\n  private _modelChangeValue: any = {};\n  private _fields: FormlyFieldConfig[];\n  private _options: FormlyFormOptions;\n  private modelChangeSubs: Subscription[] = [];\n  private modelChange$ = new Subject<void>();\n  private modelChangeSub = this.modelChange$.pipe(\n    switchMap(() => this.ngZone.onStable.asObservable().pipe(take(1))),\n  ).subscribe(() => this.ngZone.runGuarded(() => {\n    // runGuarded is used to keep in sync the expression changes\n    // https://github.com/ngx-formly/ngx-formly/issues/2095\n    this.checkExpressionChange();\n    this.modelChange.emit(this._modelChangeValue = clone(this.model));\n  }));\n\n  constructor(\n    private formlyBuilder: FormlyFormBuilder,\n    private formlyConfig: FormlyConfig,\n    private ngZone: NgZone,\n    // tslint:disable-next-line\n    @Attribute('immutable') immutable,\n    @Optional() private parentFormGroup: FormGroupDirective,\n  ) {\n    if (immutable !== null) {\n      console.warn(`NgxFormly: passing 'immutable' attribute to 'formly-form' component is deprecated since v5.5, enable immutable mode through NgModule declaration instead.`);\n    }\n\n    this.immutable = (immutable !== null) || !!formlyConfig.extras.immutable;\n  }\n\n  ngDoCheck() {\n    if (this.formlyConfig.extras.checkExpressionOn === 'changeDetectionCheck') {\n      this.checkExpressionChange();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.fields || changes.form || (changes.model && this._modelChangeValue !== changes.model.currentValue)) {\n      this.form = this.form || (new FormGroup({}));\n      this.setOptions();\n      this.options.updateInitialValue();\n      this.clearModelSubscriptions();\n      this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);\n      this.trackModelChanges(this.fields);\n    }\n  }\n\n  ngOnDestroy() {\n    this.modelChangeSub.unsubscribe();\n    this.clearModelSubscriptions();\n  }\n\n  changeModel({ key, value, field }: { key: string, value: any, field: FormlyFieldConfig }) {\n    if (\n      value == null\n      && field['autoClear']\n      && !field.formControl.parent\n    ) {\n      const paths = key.split('.');\n      const k = paths.pop();\n      const m = paths.reduce((model, path) => model[path] || {}, this.model);\n      delete m[k];\n    } else {\n      assignModelValue(this.model, key.split('.'), value);\n    }\n\n    this.modelChange$.next();\n  }\n\n  setOptions() {\n    if (!this.options) {\n      this.options = {};\n    }\n\n    if (!this.options.resetModel) {\n      this.options.resetModel = (model ?: any) => {\n        model = clone(isNullOrUndefined(model) ? (<FormlyFormOptionsCache> this.options)._initialModel : model);\n        if (this.model) {\n          Object.keys(this.model).forEach(k => delete this.model[k]);\n          Object.assign(this.model, model || {});\n        }\n\n        (<FormlyFormOptionsCache> this.options)._buildForm();\n\n        // we should call `NgForm::resetForm` to ensure changing `submitted` state after resetting form\n        // but only when the current component is a root one.\n        if (this.options.parentForm && this.options.parentForm.control === this.form) {\n          this.options.parentForm.resetForm(model);\n        } else {\n          this.form.reset(model);\n        }\n      };\n    }\n\n    if (!this.options.parentForm && this.parentFormGroup) {\n      defineHiddenProp(this.options, 'parentForm', this.parentFormGroup);\n      wrapProperty(this.options.parentForm, 'submitted', ({ firstChange }) => {\n        if (!firstChange) {\n          this.checkExpressionChange();\n          (<FormlyFormOptionsCache> this.options)._markForCheck({\n            fieldGroup: this.fields,\n            model: this.model,\n            formControl: this.form,\n            options: this.options,\n          });\n        }\n      });\n    }\n\n    if (!this.options.updateInitialValue) {\n      this.options.updateInitialValue = () => (<FormlyFormOptionsCache> this.options)._initialModel = clone(this.model);\n    }\n\n    if (!(<FormlyFormOptionsCache> this.options)._buildForm) {\n      (<FormlyFormOptionsCache> this.options)._buildForm = (emitModelChange = false) => {\n        this.clearModelSubscriptions();\n        this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);\n        this.trackModelChanges(this.fields);\n\n        if (emitModelChange) {\n          this.modelChange.emit(this._modelChangeValue = clone(this.model));\n        }\n      };\n    }\n  }\n\n  private checkExpressionChange() {\n    if (this.options && (<FormlyFormOptionsCache> this.options)._checkField) {\n      (<FormlyFormOptionsCache> this.options)._checkField({\n        fieldGroup: this.fields,\n        model: this.model,\n        formControl: this.form,\n        options: this.options,\n      });\n    }\n  }\n\n  private trackModelChanges(fields: FormlyFieldConfig[], rootKey: string[] = []) {\n    fields.forEach(field => {\n      if (field.key && !field.fieldGroup) {\n        const control = field.formControl;\n        let valueChanges = control.valueChanges.pipe(distinctUntilChanged());\n\n        const { updateOn, debounce } = field.modelOptions;\n        if ((!updateOn || updateOn === 'change') && debounce && debounce.default > 0) {\n          valueChanges = control.valueChanges.pipe(debounceTime(debounce.default));\n        }\n\n        this.modelChangeSubs.push(valueChanges.subscribe((value) => {\n          // workaround for https://github.com/angular/angular/issues/13792\n          if (control instanceof FormControl && control['_fields'] && control['_fields'].length > 1) {\n            control.patchValue(value, { emitEvent: false, onlySelf: true });\n          }\n\n          if (field.parsers && field.parsers.length > 0) {\n            field.parsers.forEach(parserFn => value = parserFn(value));\n          }\n\n          this.changeModel({ key: [...rootKey, ...getKeyPath(field)].join('.'), value, field });\n        }));\n\n        // workaround for v5 (https://github.com/ngx-formly/ngx-formly/issues/2061)\n        const observers = control.valueChanges['observers'];\n        if (observers && observers.length > 1) {\n          observers.unshift(observers.pop());\n        }\n      }\n\n      if (field.fieldGroup && field.fieldGroup.length > 0) {\n        this.trackModelChanges(field.fieldGroup, field.key ? [...rootKey, ...getKeyPath(field)] : rootKey);\n      }\n    });\n  }\n\n  private clearModelSubscriptions() {\n    this.modelChangeSubs.forEach(sub => sub.unsubscribe());\n    this.modelChangeSubs = [];\n  }\n}\n","import {\n  Component, EventEmitter, Input, Output,\n  ViewContainerRef, ViewChild, ComponentRef, SimpleChanges, Attribute, ComponentFactoryResolver,\n  OnInit, OnChanges, OnDestroy, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked, Renderer2, ElementRef,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormlyConfig } from '../services/formly.config';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyFieldConfigCache } from './formly.field.config';\nimport { defineHiddenProp, wrapProperty } from '../utils';\nimport { FieldWrapper } from '../templates/field.wrapper';\nimport { FieldType } from '../templates/field.type';\n\n@Component({\n  selector: 'formly-field',\n  template: `<ng-template #container></ng-template>`,\n})\nexport class FormlyField implements OnInit, OnChanges, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked, OnDestroy {\n  @Input() field: FormlyFieldConfig;\n\n  warnDeprecation = false;\n\n  @Input() set model(m: any) {\n    this.warnDeprecation && console.warn(`NgxFormly: passing 'model' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n  }\n\n  @Input() set form(form: FormGroup) {\n    this.warnDeprecation && console.warn(`NgxFormly: passing 'form' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n  }\n\n  @Input() set options(options: FormlyFormOptions) {\n    this.warnDeprecation && console.warn(`NgxFormly: passing 'options' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n  }\n\n  @Output() modelChange: EventEmitter<any> = new EventEmitter();\n  // TODO: remove `any`, once dropping angular `V7` support.\n  @ViewChild('container', <any> {read: ViewContainerRef, static: true }) containerRef: ViewContainerRef;\n  private hostObservers: Function[] = [];\n  private componentRefs: any[] = [];\n\n  constructor(\n    private formlyConfig: FormlyConfig,\n    private renderer: Renderer2,\n    private resolver: ComponentFactoryResolver,\n    private elementRef: ElementRef,\n    // tslint:disable-next-line\n    @Attribute('hide-deprecation') hideDeprecation,\n  ) {\n    this.warnDeprecation = hideDeprecation === null;\n  }\n\n  ngAfterContentInit() {\n    this.triggerHook('afterContentInit');\n  }\n\n  ngAfterContentChecked() {\n    this.triggerHook('afterContentChecked');\n  }\n\n  ngAfterViewInit() {\n    this.triggerHook('afterViewInit');\n  }\n\n  ngAfterViewChecked() {\n    this.triggerHook('afterViewChecked');\n  }\n\n  ngDoCheck() {\n    this.triggerHook('doCheck');\n  }\n\n  ngOnInit() {\n    this.triggerHook('onInit');\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this.triggerHook('onChanges', changes);\n  }\n\n  ngOnDestroy() {\n    this.field && this.resetRefs(this.field);\n    this.hostObservers.forEach(unsubscribe => unsubscribe());\n    this.triggerHook('onDestroy');\n  }\n\n  private renderField(containerRef: ViewContainerRef, f: FormlyFieldConfigCache, wrappers: string[]) {\n    if (this.containerRef === containerRef) {\n      this.resetRefs(this.field);\n      this.containerRef.clear();\n    }\n\n    if (wrappers && wrappers.length > 0) {\n      const [wrapper, ...wps] = wrappers;\n      const { component } = this.formlyConfig.getWrapper(wrapper);\n\n      const ref = containerRef.createComponent<FieldWrapper>(this.resolver.resolveComponentFactory(component));\n      this.attachComponentRef(ref, f);\n      wrapProperty<ViewContainerRef>(ref.instance, 'fieldComponent', ({ firstChange, previousValue, currentValue }) => {\n        if (currentValue) {\n          const viewRef = previousValue ? previousValue.detach() : null;\n          if (viewRef && !viewRef.destroyed) {\n            currentValue.insert(viewRef);\n          } else {\n            this.renderField(currentValue, f, wps);\n          }\n\n          !firstChange && ref.changeDetectorRef.detectChanges();\n        }\n      });\n    } else if (f.type) {\n      const { component } = this.formlyConfig.getType(f.type);\n      const ref = containerRef.createComponent<FieldWrapper>(this.resolver.resolveComponentFactory(component));\n      this.attachComponentRef(ref, f);\n    }\n  }\n\n  private triggerHook(name: string, changes?: SimpleChanges) {\n    if (this.field.hooks && this.field.hooks[name]) {\n      if (!changes || changes.field) {\n        this.field.hooks[name](this.field);\n      }\n    }\n\n    if (this.field.lifecycle && this.field.lifecycle[name]) {\n      this.field.lifecycle[name](\n        this.field.form,\n        this.field,\n        this.field.model,\n        this.field.options,\n      );\n    }\n\n    if (name === 'onChanges' && changes.field) {\n      this.renderHostBinding();\n      changes.field.previousValue && this.resetRefs(changes.field.previousValue);\n      this.renderField(this.containerRef, this.field, this.field.wrappers);\n    }\n  }\n\n  private attachComponentRef<T extends FieldType>(ref: ComponentRef<T>, field: FormlyFieldConfigCache) {\n    this.componentRefs.push(ref);\n    field._componentRefs.push(ref);\n    Object.assign(ref.instance, { field });\n  }\n\n  private renderHostBinding() {\n    this.hostObservers.forEach(unsubscribe => unsubscribe());\n    this.hostObservers = [\n      wrapProperty(this.field, 'hide', ({ firstChange, currentValue }) => {\n        if (!firstChange || (firstChange && currentValue)) {\n          this.renderer.setStyle(this.elementRef.nativeElement, 'display', currentValue ? 'none' : '');\n        }\n      }),\n      wrapProperty(this.field, 'className', ({ firstChange, currentValue }) => {\n        if (!firstChange || (firstChange && currentValue)) {\n          this.renderer.setAttribute(this.elementRef.nativeElement, 'class', currentValue);\n        }\n      }),\n    ];\n  }\n\n  private resetRefs(field: FormlyFieldConfigCache) {\n    if (field) {\n      if (field._componentRefs) {\n        field._componentRefs = field._componentRefs.filter(ref => this.componentRefs.indexOf(ref) === -1);\n      } else {\n        defineHiddenProp(this.field, '_componentRefs', []);\n      }\n    }\n\n    this.componentRefs = [];\n  }\n}\n","import { Directive, ElementRef, Input, OnChanges, SimpleChanges, Renderer2, DoCheck, Inject, OnDestroy } from '@angular/core';\nimport { FormlyFieldConfig, FormlyTemplateOptions } from './formly.field.config';\nimport { wrapProperty, defineHiddenProp, FORMLY_VALIDATORS } from '../utils';\nimport { DOCUMENT } from '@angular/common';\n\n@Directive({\n  selector: '[formlyAttributes]',\n  host: {\n    '(focus)': 'onFocus($event)',\n    '(blur)': 'onBlur($event)',\n    '(change)': 'onChange($event)',\n  },\n})\nexport class FormlyAttributes implements OnChanges, DoCheck, OnDestroy {\n  @Input('formlyAttributes') field: FormlyFieldConfig;\n  @Input() id: string;\n\n  private document: Document;\n  private uiAttributesCache: any = {};\n  private uiAttributes = [\n    ...FORMLY_VALIDATORS,\n    'tabindex',\n    'placeholder',\n    'readonly',\n    'disabled',\n    'step',\n  ];\n\n  /**\n   * HostBinding doesn't register listeners conditionally which may produce some perf issues.\n   *\n   * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1991\n   */\n  private uiEvents = {\n    listeners: [],\n    events: [\n      'click',\n      'keyup',\n      'keydown',\n      'keypress',\n    ],\n  };\n\n  get to(): FormlyTemplateOptions { return this.field.templateOptions || {}; }\n\n  private get fieldAttrElements(): ElementRef[] { return (this.field && this.field['_elementRefs']) || []; }\n\n  constructor(\n    private renderer: Renderer2,\n    private elementRef: ElementRef,\n    @Inject(DOCUMENT) _document: any,\n  ) {\n    this.document = _document;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.field) {\n      this.field.name && this.setAttribute('name', this.field.name);\n      this.uiEvents.listeners.forEach(listener => listener());\n      this.uiEvents.events.forEach(eventName => {\n        if (this.to && this.to[eventName]) {\n          this.uiEvents.listeners.push(\n            this.renderer.listen(\n              this.elementRef.nativeElement,\n              eventName,\n              (e) => this.to[eventName](this.field, e),\n            ),\n          );\n        }\n      });\n\n      if (this.to && this.to.attributes) {\n        wrapProperty(this.to, 'attributes', ({ currentValue, previousValue }) => {\n          if (previousValue) {\n            Object.keys(previousValue).forEach(attr => this.removeAttribute(attr));\n          }\n\n          if (currentValue) {\n            Object.keys(currentValue).forEach(attr => this.setAttribute(attr, currentValue[attr]));\n          }\n        });\n      }\n\n      this.detachElementRef(changes.field.previousValue);\n      this.attachElementRef(changes.field.currentValue);\n      if (this.fieldAttrElements.length === 1) {\n        !this.id && this.field.id && this.setAttribute('id', this.field.id);\n        wrapProperty(this.field, 'focus', ({ currentValue }) => {\n          this.toggleFocus(currentValue);\n        });\n      }\n    }\n\n    if (changes.id) {\n      this.setAttribute('id', this.id);\n    }\n  }\n\n  /**\n   * We need to re-evaluate all the attributes on every change detection cycle, because\n   * by using a HostBinding we run into certain edge cases. This means that whatever logic\n   * is in here has to be super lean or we risk seriously damaging or destroying the performance.\n   *\n   * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1317\n   * Material issue: https://github.com/angular/components/issues/14024\n   */\n  ngDoCheck() {\n    this.uiAttributes.forEach(attr => {\n      const value = this.to[attr];\n      if (this.uiAttributesCache[attr] !== value) {\n        this.uiAttributesCache[attr] = value;\n        if (value || value === 0) {\n          this.setAttribute(attr, value === true ? attr : `${value}`);\n        } else {\n          this.removeAttribute(attr);\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.uiEvents.listeners.forEach(listener => listener());\n    this.detachElementRef(this.field);\n  }\n\n  toggleFocus(value: boolean) {\n    const element = this.fieldAttrElements ? this.fieldAttrElements[0] : null;\n    if (!element || !element.nativeElement.focus) {\n      return;\n    }\n\n    const isFocused = !!this.document.activeElement\n      && this.fieldAttrElements\n        .some(({ nativeElement }) => this.document.activeElement === nativeElement || nativeElement.contains(this.document.activeElement));\n\n    if (value && !isFocused) {\n      element.nativeElement.focus();\n    } else if (!value && isFocused) {\n      element.nativeElement.blur();\n    }\n  }\n\n  onFocus($event: any) {\n    this.field['___$focus'] = true;\n    if (this.to.focus) {\n      this.to.focus(this.field, $event);\n    }\n  }\n\n  onBlur($event: any) {\n    this.field['___$focus'] = false;\n    if (this.to.blur) {\n      this.to.blur(this.field, $event);\n    }\n  }\n\n  onChange($event: any) {\n    if (this.to.change) {\n      this.to.change(this.field, $event);\n    }\n\n    if (this.field.formControl) {\n      this.field.formControl.markAsDirty();\n    }\n  }\n\n  private attachElementRef(f: FormlyFieldConfig) {\n    if (!f) {\n      return;\n    }\n\n    if (f['_elementRefs'] && f['_elementRefs'].indexOf(this.elementRef) === -1) {\n      f['_elementRefs'].push(this.elementRef);\n    } else {\n      defineHiddenProp(f, '_elementRefs', [this.elementRef]);\n    }\n  }\n\n  private detachElementRef(f: FormlyFieldConfig) {\n    const index = f && f['_elementRefs'] ? this.fieldAttrElements.indexOf(this.elementRef) : -1;\n    if (index !== -1) {\n      this.field['_elementRefs'].splice(index, 1);\n    }\n  }\n\n  private setAttribute(attr: string, value: string) {\n    this.renderer.setAttribute(this.elementRef.nativeElement, attr, value);\n  }\n\n  private removeAttribute(attr: string) {\n    this.renderer.removeAttribute(this.elementRef.nativeElement, attr);\n  }\n}\n","import { Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\n\nexport abstract class FieldType<F extends FormlyFieldConfig = FormlyFieldConfig> {\n  @Input() field: F;\n  defaultOptions?: F;\n\n  @Input()\n  get model() { return this.field.model; }\n  set model(m: any) { console.warn(`NgxFormly: passing 'model' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }\n\n  @Input()\n  get form() { return <FormGroup> this.field.parent.formControl; }\n  set form(form) { console.warn(`NgxFormly: passing 'form' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }\n\n  @Input()\n  get options() { return this.field.options; }\n  set options(options: F['options']) { console.warn(`NgxFormly: passing 'options' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }\n\n  get key() { return this.field.key; }\n\n  get formControl() { return this.field.formControl; }\n\n  get to() { return this.field.templateOptions || {}; }\n\n  get showError(): boolean { return this.options.showError(this); }\n\n  get id(): string { return this.field.id; }\n\n  get formState() { return this.options.formState || {}; }\n}\n\n/**\n * @deprecated use `FieldType` instead\n */\nexport abstract class Field extends FieldType {\n  constructor() {\n    super();\n    console.warn(`NgxFormly: 'Field' has been renamed to 'FieldType', extend 'FieldType' instead.`);\n  }\n}\n","import { FormArray, FormGroup, FormControl, AbstractControl } from '@angular/forms';\nimport { FormlyFieldConfig } from '../../core';\nimport { getKeyPath, getFieldValue, isNullOrUndefined, defineHiddenProp, wrapProperty, assignModelValue, isUndefined } from '../../utils';\nimport { FormlyFieldConfigCache } from '../../components/formly.field.config';\n\nexport function unregisterControl(field: FormlyFieldConfig, emitEvent = false) {\n  const form = field.formControl.parent as FormArray | FormGroup;\n  if (!form) {\n    return;\n  }\n\n  const control = field.formControl;\n  const opts = { emitEvent };\n  if (form instanceof FormArray) {\n    const key = form.controls.findIndex(c => c === control);\n    if (key !== -1) {\n      updateControl(form, opts, () => form.removeAt(key));\n    }\n  } else if (form instanceof FormGroup) {\n    const paths = getKeyPath(field);\n    const key = paths[paths.length - 1];\n    if (form.get([key]) === control) {\n      updateControl(form, opts, () => form.removeControl(key));\n    }\n  }\n\n  control.setParent(null);\n  if (field['autoClear']) {\n    if (field.parent.model) {\n      delete field.parent.model[field.key];\n    }\n    control.reset(\n      { value: undefined, disabled: control.disabled },\n      { emitEvent: field.fieldGroup ? false : emitEvent, onlySelf: true },\n    );\n  }\n}\n\nexport function findControl(field: FormlyFieldConfig): AbstractControl {\n  if (field.formControl) {\n    return field.formControl;\n  }\n\n  const form = field.parent.formControl as FormGroup;\n\n  return form ? form.get(getKeyPath(field)) : null;\n}\n\nexport function registerControl(field: FormlyFieldConfigCache, control?: any, emitEvent = false) {\n  control = control || field.formControl;\n  if (!control['_fields']) {\n    defineHiddenProp(control, '_fields', []);\n  }\n  if (control['_fields'].indexOf(field) === -1) {\n    control['_fields'].push(field);\n  }\n\n  if (!field.formControl && control) {\n    defineHiddenProp(field, 'formControl', control);\n\n    field.templateOptions.disabled = !!field.templateOptions.disabled;\n    wrapProperty(field.templateOptions, 'disabled', ({ firstChange, currentValue }) => {\n      if (!firstChange) {\n        currentValue ? field.formControl.disable() : field.formControl.enable();\n      }\n    });\n    if (control.registerOnDisabledChange) {\n      control.registerOnDisabledChange(\n        (value: boolean) => field.templateOptions['___$disabled'] = value,\n      );\n    }\n  }\n\n  let parent = field.parent.formControl as FormGroup;\n  if (!parent) {\n    return;\n  }\n\n  const paths = getKeyPath(field);\n  if (!parent['_formlyControls']) {\n    defineHiddenProp(parent, '_formlyControls', {});\n  }\n  parent['_formlyControls'][paths.join('.')] = control;\n\n  for (let i = 0; i < (paths.length - 1); i++) {\n    const path = paths[i];\n    if (!parent.get([path])) {\n      registerControl({\n        key: path,\n        formControl: new FormGroup({}),\n        parent: { formControl: parent },\n      });\n    }\n\n    parent = <FormGroup> parent.get([path]);\n  }\n\n  if (field['autoClear'] && !isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {\n    assignModelValue(field.parent.model, getKeyPath(field), field.defaultValue);\n  }\n\n  const value = getFieldValue(field);\n  if (\n    !(isNullOrUndefined(control.value) && isNullOrUndefined(value))\n    && control.value !== value\n    && control instanceof FormControl\n  ) {\n    control.patchValue(value);\n  }\n  const key = paths[paths.length - 1];\n  if (!field._hide && parent.get([key]) !== control) {\n    updateControl(\n      parent,\n      { emitEvent },\n      () => parent.setControl(key, control),\n    );\n  }\n}\n\nfunction updateControl(form: FormGroup|FormArray, opts: { emitEvent: boolean }, action: Function) {\n  /**\n   *  workaround for https://github.com/angular/angular/issues/27679\n   */\n  if (form instanceof FormGroup && !form['__patchForEachChild']) {\n    defineHiddenProp(form, '__patchForEachChild', true);\n    (form as any)._forEachChild = (cb: Function) => {\n      Object\n        .keys(form.controls)\n        .forEach(k => form.controls[k] && cb(form.controls[k], k));\n    };\n  }\n\n  /**\n   * workaround for https://github.com/angular/angular/issues/20439\n   */\n  const updateValueAndValidity = form.updateValueAndValidity.bind(form);\n  if (opts.emitEvent === false) {\n    form.updateValueAndValidity = (opts) => {\n      updateValueAndValidity({ ...(opts || {}), emitEvent: false });\n    };\n  }\n\n  action();\n\n  if (opts.emitEvent === false) {\n    form.updateValueAndValidity = updateValueAndValidity;\n  }\n}","import { Inject, Optional } from '@angular/core';\nimport { FormArray } from '@angular/forms';\nimport { FieldType } from './field.type';\nimport { clone, isNullOrUndefined, assignModelValue, getKeyPath } from '../utils';\nimport { FormlyFormBuilder } from '../services/formly.form.builder';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\nimport { FORMLY_CONFIG, FormlyExtension } from '../services/formly.config';\nimport { registerControl, unregisterControl } from '../extensions/field-form/utils';\n\nexport abstract class FieldArrayType<F extends FormlyFieldConfig = FormlyFieldConfig> extends FieldType<F> implements FormlyExtension {\n  formControl: FormArray;\n  defaultOptions: any = {\n    defaultValue: [],\n  };\n\n  constructor(@Inject(FORMLY_CONFIG) @Optional() builder?: FormlyFormBuilder) {\n    super();\n\n    if (builder instanceof FormlyFormBuilder) {\n      console.warn(`NgxFormly: passing 'FormlyFormBuilder' to '${this.constructor.name}' type is not required anymore, you may remove it!`);\n    }\n  }\n\n  onPopulate(field: FormlyFieldConfig) {\n    if (!field.formControl) {\n      registerControl(field, new FormArray([], { updateOn: field.modelOptions.updateOn }));\n    }\n\n    field.fieldGroup = field.fieldGroup || [];\n\n    const length = field.model ? field.model.length : 0;\n    if (field.fieldGroup.length > length) {\n      for (let i = field.fieldGroup.length - 1; i >= length; --i) {\n        unregisterControl(field.fieldGroup[i]);\n        field.fieldGroup.splice(i, 1);\n      }\n    }\n\n    for (let i = field.fieldGroup.length; i < length; i++) {\n      const f = { ...clone(field.fieldArray), key: `${i}` };\n      field.fieldGroup.push(f);\n    }\n  }\n\n  add(i?: number, initialModel?: any) {\n    i = isNullOrUndefined(i) ? this.field.fieldGroup.length : i;\n    if (!this.model) {\n      assignModelValue(this.field.parent.model, getKeyPath(this.field), []);\n    }\n\n    this.model.splice(i, 0, initialModel ? clone(initialModel) : undefined);\n\n    (<any> this.options)._buildForm(true);\n    this.formControl.markAsDirty();\n  }\n\n  remove(i: number) {\n    this.model.splice(i, 1);\n    unregisterControl(this.field.fieldGroup[i], true);\n    this.field.fieldGroup.splice(i, 1);\n    this.field.fieldGroup.forEach((f, key) => f.key = `${key}`);\n\n    (<any> this.options)._buildForm(true);\n    this.formControl.markAsDirty();\n  }\n}\n","import { ViewContainerRef, ViewChild } from '@angular/core';\nimport { FieldType } from './field.type';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\n\nexport abstract class FieldWrapper<F extends FormlyFieldConfig = FormlyFieldConfig> extends FieldType<F> {\n  // TODO: remove `any`, once dropping angular `V7` support.\n  @ViewChild('fieldComponent', <any>{ read: ViewContainerRef, static: false }) fieldComponent: ViewContainerRef;\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from './field.type';\n\n@Component({\n  selector: 'formly-group',\n  template: `\n    <formly-field *ngFor=\"let f of field.fieldGroup\" [field]=\"f\"></formly-field>\n    <ng-content></ng-content>\n  `,\n  host: {\n    '[class]': 'field.fieldGroupClassName || \"\"',\n  },\n})\nexport class FormlyGroup extends FieldType {\n  defaultOptions = {\n    defaultValue: {},\n  };\n}\n","import { Component, Input, ChangeDetectionStrategy, OnChanges } from '@angular/core';\nimport { FormlyConfig } from '../services/formly.config';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\nimport { isObject } from '../utils';\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\n\n@Component({\n  selector: 'formly-validation-message',\n  template: `{{ errorMessage$ | async }}`,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FormlyValidationMessage implements OnChanges {\n  @Input() field: FormlyFieldConfig;\n  errorMessage$: Observable<string>;\n\n  constructor(private formlyConfig: FormlyConfig) {}\n\n  ngOnChanges() {\n    this.errorMessage$ = this.field.formControl.statusChanges.pipe(\n      startWith(null),\n      map(() => this.errorMessage),\n    );\n  }\n\n  get errorMessage(): string {\n    const fieldForm = this.field.formControl;\n    for (let error in fieldForm.errors) {\n      if (fieldForm.errors.hasOwnProperty(error)) {\n        let message: string | Function = this.formlyConfig.getValidatorMessage(error);\n\n        if (isObject(fieldForm.errors[error])) {\n          if (fieldForm.errors[error].errorPath) {\n            return;\n          }\n\n          if (fieldForm.errors[error].message) {\n            message = fieldForm.errors[error].message;\n          }\n        }\n\n        if (this.field.validation && this.field.validation.messages && this.field.validation.messages[error]) {\n          message = this.field.validation.messages[error];\n        }\n\n        if (this.field.validators && this.field.validators[error] && this.field.validators[error].message) {\n          message = this.field.validators[error].message;\n        }\n\n        if (this.field.asyncValidators && this.field.asyncValidators[error] && this.field.asyncValidators[error].message) {\n          message = this.field.asyncValidators[error].message;\n        }\n\n        if (typeof message === 'function') {\n          return message(fieldForm.errors[error], this.field);\n        }\n\n        return message;\n      }\n    }\n  }\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from './field.type';\n\n@Component({\n  selector: 'formly-template',\n  template: `<div [innerHtml]=\"field.template\"></div>`,\n})\nexport class FormlyTemplateType extends FieldType {}\n","export function evalStringExpression(expression: string, argNames: string[]) {\n  try {\n    if (expression.indexOf('this.field') !== -1) {\n      console.warn(`NgxFormly: using 'this.field' in expressionProperties is deprecated since v5.1, use 'field' instead.`);\n    }\n\n    return Function(...argNames, `return ${expression};`) as any;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport function evalExpressionValueSetter(expression: string, argNames: string[]) {\n  try {\n    return Function(...argNames, `${expression} = expressionValue;`) as (value: any) => void;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport function evalExpression(expression: string | Function | boolean, thisArg: any, argVal: any[]): any {\n  if (expression instanceof Function) {\n    return expression.apply(thisArg, argVal);\n  } else {\n    return expression ? true : false;\n  }\n}\n","import { FormlyFieldConfig, FormlyValueChangeEvent, FormlyFieldConfigCache } from '../../components/formly.field.config';\nimport { isObject, isNullOrUndefined, isFunction, defineHiddenProp, wrapProperty, reduceFormUpdateValidityCalls } from '../../utils';\nimport { evalExpression, evalStringExpression, evalExpressionValueSetter } from './utils';\nimport { Observable } from 'rxjs';\nimport { FormlyExtension } from '../../services/formly.config';\nimport { unregisterControl, registerControl } from '../field-form/utils';\n\n/** @experimental */\nexport class FieldExpressionExtension implements FormlyExtension {\n  prePopulate(field: FormlyFieldConfigCache) {\n    if (field.parent || field.options._checkField) {\n      return;\n    }\n\n    field.options._checkField = (f, ignoreCache) => {\n      reduceFormUpdateValidityCalls(\n        f.formControl,\n        () => this.checkField(f, ignoreCache),\n      );\n    };\n  }\n\n  onPopulate(field: FormlyFieldConfigCache) {\n    if (!field.parent || field._expressionProperties) {\n      return;\n    }\n\n    // cache built expression\n    defineHiddenProp(field, '_expressionProperties', {});\n\n    if (field.expressionProperties) {\n      for (const key in field.expressionProperties) {\n        const expressionProperty = field.expressionProperties[key],\n          expressionValueSetter = evalExpressionValueSetter(\n            `field.${key}`,\n            ['expressionValue', 'model', 'field'],\n          );\n\n        if (typeof expressionProperty === 'string' || isFunction(expressionProperty)) {\n          field._expressionProperties[key] = {\n            expression: this._evalExpression(\n              expressionProperty,\n              field.parent.expressionProperties && field.parent.expressionProperties.hasOwnProperty('templateOptions.disabled')\n                ? () => field.parent.templateOptions.disabled\n                : undefined,\n            ),\n            expressionValueSetter,\n          };\n          if (key === 'templateOptions.disabled') {\n            Object.defineProperty(field._expressionProperties[key], 'expressionValue', {\n              get: () => field.templateOptions.disabled,\n              set: () => { },\n              enumerable: true,\n              configurable: true,\n            });\n          }\n        } else if (expressionProperty instanceof Observable) {\n          const subscription = (expressionProperty as Observable<any>)\n            .subscribe(v => {\n              this.setExprValue(field, key, expressionValueSetter, v);\n              if (field.options && field.options._markForCheck) {\n                field.options._markForCheck(field);\n              }\n            });\n\n          const onDestroy = field.hooks.onDestroy;\n          field.hooks.onDestroy = (field) => {\n            onDestroy && onDestroy(field);\n            subscription.unsubscribe();\n          };\n        }\n      }\n    }\n\n    if (field.hideExpression) {\n      // delete hide value in order to force re-evaluate it in FormlyFormExpression.\n      delete field.hide;\n\n      let parent = field.parent;\n      while (parent && !parent.hideExpression) {\n        parent = parent.parent;\n      }\n\n      field.hideExpression = this._evalExpression(\n        field.hideExpression,\n        parent && parent.hideExpression ? () => parent.hide : undefined,\n      );\n    } else {\n      wrapProperty(field, 'hide', ({ currentValue, firstChange }) => {\n        field._hide = currentValue;\n        if (!firstChange || (firstChange && currentValue === true)) {\n          field.options._hiddenFieldsForCheck.push(field);\n        }\n      });\n    }\n  }\n\n  private _evalExpression(expression, parentExpression?) {\n    expression = expression || (() => false);\n    if (typeof expression === 'string') {\n      expression = evalStringExpression(expression, ['model', 'formState', 'field']);\n    }\n\n    return parentExpression\n      ? (model: any, formState: any, field: FormlyFieldConfig) => parentExpression() || expression(model, formState, field)\n      : expression;\n  }\n\n  private checkField(field: FormlyFieldConfigCache, ignoreCache = false) {\n    this._checkField(field, ignoreCache);\n\n    field.options._hiddenFieldsForCheck\n      .sort(f => f.hide ? -1 : 1)\n      .forEach(f => this.toggleFormControl(f, f.hide));\n\n    field.options._hiddenFieldsForCheck = [];\n  }\n\n  private _checkField(field: FormlyFieldConfigCache, ignoreCache = false) {\n    let markForCheck = false;\n    field.fieldGroup.forEach(f => {\n      this.checkFieldExpressionChange(f, ignoreCache) && (markForCheck = true);\n      if (this.checkFieldVisibilityChange(f, ignoreCache)) {\n        field.options._hiddenFieldsForCheck.push(f);\n        markForCheck = true;\n      }\n\n      if (f.fieldGroup && f.fieldGroup.length > 0) {\n        this._checkField(f, ignoreCache);\n      }\n    });\n\n    if (markForCheck && field.options && field.options._markForCheck) {\n      field.options._markForCheck(field);\n    }\n  }\n\n  private checkFieldExpressionChange(field: FormlyFieldConfigCache, ignoreCache): boolean {\n    if (!field || !field._expressionProperties) {\n      return false;\n    }\n\n    let markForCheck = false;\n    const expressionProperties = field._expressionProperties;\n\n    for (const key in expressionProperties) {\n      let expressionValue = evalExpression(expressionProperties[key].expression, { field }, [field.model, field.options.formState, field]);\n      if (key === 'templateOptions.disabled') {\n        expressionValue = !!expressionValue;\n      }\n\n      if (\n        ignoreCache || (\n          expressionProperties[key].expressionValue !== expressionValue\n          && (!isObject(expressionValue) || JSON.stringify(expressionValue) !== JSON.stringify(expressionProperties[key].expressionValue))\n        )\n      ) {\n        markForCheck = true;\n        expressionProperties[key].expressionValue = expressionValue;\n        const setter = expressionProperties[key].expressionValueSetter;\n        this.setExprValue(field, key, setter, expressionValue);\n      }\n    }\n\n    return markForCheck;\n  }\n\n  private checkFieldVisibilityChange(field: FormlyFieldConfigCache, ignoreCache): boolean {\n    if (!field || isNullOrUndefined(field.hideExpression)) {\n      return false;\n    }\n\n    const hideExpressionResult: boolean = !!evalExpression(\n      field.hideExpression,\n      { field },\n      [field.model, field.options.formState, field],\n    );\n    let markForCheck = false;\n    if (hideExpressionResult !== field.hide || ignoreCache) {\n      markForCheck = true;\n      // toggle hide\n      field.hide = hideExpressionResult;\n      field.templateOptions.hidden = hideExpressionResult;\n    }\n\n    return markForCheck;\n  }\n\n  private setDisabledState(field: FormlyFieldConfig, value: boolean) {\n    if (field.fieldGroup) {\n      field.fieldGroup\n        .filter(f => !f.expressionProperties || !f.expressionProperties.hasOwnProperty('templateOptions.disabled'))\n        .forEach(f => this.setDisabledState(f, value));\n    }\n\n    if (field.key && field.templateOptions.disabled !== value) {\n      field.templateOptions.disabled = value;\n    }\n  }\n\n  private toggleFormControl(field: FormlyFieldConfigCache, hide: boolean) {\n    if (field.formControl && field.key) {\n      defineHiddenProp(field, '_hide', !!(hide || field.hide));\n      const c = field.formControl;\n      if (c['_fields'].length > 1) {\n        c.updateValueAndValidity({ emitEvent: false });\n      }\n\n      hide === true && c['_fields'].every(f => !!f._hide)\n        ? unregisterControl(field)\n        : registerControl(field);\n    }\n\n    if (field.fieldGroup) {\n      field.fieldGroup\n        .filter(f => !f.hideExpression)\n        .forEach(f => this.toggleFormControl(f, hide));\n    }\n\n    if (field.options.fieldChanges) {\n      field.options.fieldChanges.next(<FormlyValueChangeEvent> { field: field, type: 'hidden', value: hide });\n    }\n  }\n\n  private setExprValue(field: FormlyFieldConfigCache, prop: string, setter: Function, value: any) {\n    evalExpression(setter, { field }, [value, field.model, field]);\n\n    if (prop === 'templateOptions.disabled' && field.key) {\n      this.setDisabledState(field, value);\n    }\n\n    if (prop.indexOf('model.') === 0) {\n      const path = prop.replace(/^model\\./, ''),\n        control = field.key && prop === path ? field.formControl : field.parent.formControl.get(path);\n\n      if (\n        control\n        && !(isNullOrUndefined(control.value) && isNullOrUndefined(value))\n        && control.value !== value\n      ) {\n        control.patchValue(value, { emitEvent: false });\n      }\n    }\n  }\n}\n","import { FormlyExtension, FieldValidatorFn, FormlyConfig } from '../../services/formly.config';\nimport { FormlyFieldConfigCache } from '../../components/formly.field.config';\nimport { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\nimport { isObject, FORMLY_VALIDATORS, defineHiddenProp, isPromise, wrapProperty } from '../../utils';\n\n/** @experimental */\nexport class FieldValidationExtension implements FormlyExtension {\n  constructor(private formlyConfig: FormlyConfig) {}\n\n  onPopulate(field: FormlyFieldConfigCache) {\n    if (!field.parent || !field.key) {\n      return;\n    }\n\n    this.initFieldValidation(field, 'validators');\n    this.initFieldValidation(field, 'asyncValidators');\n  }\n\n  private initFieldValidation(field: FormlyFieldConfigCache, type: 'validators' | 'asyncValidators') {\n    const validators: ValidatorFn[] = type === 'validators' ? [this.getPredefinedFieldValidation(field)] : [];\n    if (field[type]) {\n      for (const validatorName in field[type]) {\n        if (validatorName === 'validation' && !Array.isArray(field[type].validation)) {\n          field[type].validation = [field[type].validation];\n          console.warn(`NgxFormly(${field.key}): passing a non array value to the 'validation' is deprecated, pass an array instead`);\n        }\n\n        validatorName === 'validation'\n          ? validators.push(...field[type].validation.map(v => this.wrapNgValidatorFn(field, v)))\n          : validators.push(this.wrapNgValidatorFn(field, field[type][validatorName], validatorName))\n        ;\n      }\n    }\n\n    defineHiddenProp(\n      field,\n      '_' + type,\n      type === 'validators' ? Validators.compose(validators) : Validators.composeAsync(validators as any),\n    );\n  }\n\n  private getPredefinedFieldValidation(field: FormlyFieldConfigCache): ValidatorFn {\n    let VALIDATORS = [];\n    FORMLY_VALIDATORS.forEach(opt => wrapProperty(field.templateOptions, opt, ({ currentValue, firstChange }) => {\n      VALIDATORS = VALIDATORS.filter(o => o !== opt);\n      if (currentValue != null && currentValue !== false) {\n        VALIDATORS.push(opt);\n      }\n      if (!firstChange && field.formControl) {\n        field.formControl.updateValueAndValidity({ emitEvent: false });\n      }\n    }));\n\n    return (control: AbstractControl) => {\n      if (VALIDATORS.length === 0) {\n        return null;\n      }\n\n      return Validators.compose(VALIDATORS.map(opt => () => {\n        const value = field.templateOptions[opt];\n        switch (opt) {\n          case 'required':\n            return Validators.required(control);\n          case 'pattern':\n            return Validators.pattern(value)(control);\n          case 'minLength':\n            return Validators.minLength(value)(control);\n          case 'maxLength':\n            return Validators.maxLength(value)(control);\n          case 'min':\n            return Validators.min(value)(control);\n          case 'max':\n            return Validators.max(value)(control);\n        }\n      }))(control);\n    };\n  }\n\n  private wrapNgValidatorFn(field: FormlyFieldConfigCache, validator: string | FieldValidatorFn, validatorName?: string) {\n    return (control: AbstractControl) => {\n      let validatorFn = validator as FieldValidatorFn;\n      if (typeof validator === 'string') {\n        validatorFn = this.formlyConfig.getValidator(validator).validation;\n      }\n      if (isObject(validator)) {\n        validatorFn = (validator as any).expression;\n      }\n\n      const isValid = validatorFn(control, field);\n      if (validatorName) {\n        if (isPromise(isValid)) {\n          return isValid.then((result: boolean) => {\n            // workaround for https://github.com/angular/angular/issues/13200\n            if (field.options && field.options._markForCheck) {\n              field.options._markForCheck(field);\n            }\n\n            return this.handleResult(field, result, { validatorName, validator });\n          });\n        }\n\n        return this.handleResult(field, isValid, { validatorName, validator });\n      }\n\n      return isValid;\n    };\n  }\n\n  private handleResult(field: FormlyFieldConfigCache, isValid, { validatorName, validator }) {\n    if (isObject(validator) && field.formControl && validator.errorPath) {\n      const control = field.formControl.get(validator.errorPath);\n      if (control) {\n        const controlErrors = (control.errors || {});\n        if (!isValid) {\n          control.setErrors({ ...controlErrors, [validatorName]: { message: validator.message } });\n        } else {\n          delete controlErrors[validatorName];\n          control.setErrors(Object.keys(controlErrors).length === 0 ? null : controlErrors);\n        }\n      }\n\n      return isValid ? null : { [validatorName]: { errorPath: validator.errorPath } };\n    }\n\n    return isValid ? null : { [validatorName]: true };\n  }\n}\n","import { FormlyExtension, FormlyConfig } from '../../services/formly.config';\nimport { FormlyFieldConfigCache } from '../../components/formly.field.config';\nimport { FormGroup, FormControl, AbstractControlOptions, Validators } from '@angular/forms';\nimport { getFieldValue, defineHiddenProp } from '../../utils';\nimport { registerControl, findControl } from './utils';\nimport { of } from 'rxjs';\n\n/** @experimental */\nexport class FieldFormExtension implements FormlyExtension {\n  constructor(private config: FormlyConfig) { }\n\n  onPopulate(field: FormlyFieldConfigCache) {\n    if (field.key) {\n      this.addFormControl(field);\n    }\n\n    if (field.parent && field.fieldGroup && !field.key) {\n      defineHiddenProp(field, 'formControl', field.parent.formControl);\n    }\n  }\n\n  postPopulate(field: FormlyFieldConfigCache) {\n    if (field.parent) {\n      return;\n    }\n\n    const updateValidity = this.setValidators(field);\n    updateValidity && (field.formControl as any)._updateTreeValidity();\n  }\n\n  private addFormControl(field: FormlyFieldConfigCache) {\n    let control = findControl(field);\n    if (!control) {\n      const controlOptions: AbstractControlOptions = { updateOn: field.modelOptions.updateOn };\n      const value = getFieldValue(field);\n\n      const ref = this.config ? this.config.resolveFieldTypeRef(field) : null;\n      if (ref && ref.componentType && ref.componentType['createControl']) {\n        const component = ref.componentType;\n        console.warn(`NgxFormly: '${component.name}::createControl' is deprecated since v5.0, use 'prePopulate' hook instead.`);\n        control = component['createControl'](value, field);\n      } else if (field.fieldGroup) {\n        // TODO: move to postPopulate\n        control = new FormGroup({}, controlOptions);\n      } else {\n        control = new FormControl(value, controlOptions);\n      }\n    }\n\n    registerControl(field, control);\n  }\n\n  private setValidators(field: FormlyFieldConfigCache) {\n    let updateValidity = false;\n    if (field.key) {\n      const {\n        formControl: c,\n        templateOptions: { disabled },\n      } = field;\n\n      if (disabled && c.enabled) {\n        c.disable({ emitEvent: false, onlySelf: true });\n        updateValidity = true;\n      }\n\n      if (null === c.validator || null === c.asyncValidator) {\n        c.setValidators(() => {\n          const fields: FormlyFieldConfigCache[] = c['_fields'].length === 1\n            ? c['_fields']\n            : c['_fields'].filter(f => !f._hide);\n\n          const v = Validators.compose(fields.map(f => f._validators));\n\n          return v ? v(c) : null;\n        });\n        c.setAsyncValidators(() => {\n          const fields: FormlyFieldConfigCache[] = c['_fields'].length === 1\n            ? c['_fields']\n            : c['_fields'].filter(f => !f._hide);\n\n          const v = Validators.composeAsync(fields.map(f => f._asyncValidators));\n\n          return v ? v(c) : of(null);\n        });\n\n        if (!c.parent) {\n          c.updateValueAndValidity({ emitEvent: false });\n        } else {\n          updateValidity = true;\n        }\n      }\n    }\n\n    (field.fieldGroup || []).forEach(f => this.setValidators(f) && (updateValidity = true));\n\n    return updateValidity;\n  }\n}\n","import { FormlyExtension, FormlyConfig, TemplateManipulators } from '../../services/formly.config';\nimport { FormlyFieldConfigCache, FormlyFieldConfig } from '../../components/formly.field.config';\nimport { FormGroup } from '@angular/forms';\nimport { getFieldId, assignModelValue, isUndefined, getFieldValue, reverseDeepMerge, getKeyPath } from '../../utils';\n\n/** @experimental */\nexport class CoreExtension implements FormlyExtension {\n  private formId = 0;\n  constructor(private formlyConfig: FormlyConfig) { }\n\n  prePopulate(field: FormlyFieldConfigCache) {\n    this.getFieldComponentInstance(field).prePopulate();\n    if (field.parent) {\n      return;\n    }\n\n    const fieldTransforms = (field.options && field.options.fieldTransform) || this.formlyConfig.extras.fieldTransform;\n    (Array.isArray(fieldTransforms) ? fieldTransforms : [fieldTransforms]).forEach(fieldTransform => {\n      if (fieldTransform) {\n        console.warn(`NgxFormly: fieldTransform is deprecated since v5.0, use custom extension instead.`);\n        const fieldGroup = fieldTransform(field.fieldGroup, field.model, <FormGroup>field.formControl, field.options);\n        if (!fieldGroup) {\n          throw new Error('fieldTransform must return an array of fields');\n        }\n      }\n    });\n  }\n\n  onPopulate(field: FormlyFieldConfigCache) {\n    this.initFieldOptions(field);\n    this.getFieldComponentInstance(field).onPopulate();\n    if (field.fieldGroup) {\n      field.fieldGroup.forEach((f, index) => {\n        Object.defineProperty(f, 'parent', { get: () => field, configurable: true });\n        Object.defineProperty(f, 'index', { get: () => index, configurable: true });\n        this.formId++;\n      });\n    }\n  }\n\n  postPopulate(field: FormlyFieldConfigCache) {\n    this.getFieldComponentInstance(field).postPopulate();\n  }\n\n  private initFieldOptions(field: FormlyFieldConfigCache) {\n    const root = <FormlyFieldConfigCache> field.parent;\n    if (!root) {\n      return;\n    }\n\n    Object.defineProperty(field, 'form', { get: () => root.formControl, configurable: true });\n    Object.defineProperty(field, 'options', { get: () => root.options, configurable: true });\n    Object.defineProperty(field, 'model', {\n      get: () => field.key && field.fieldGroup ? getFieldValue(field) : root.model,\n      configurable: true,\n    });\n\n    reverseDeepMerge(field, {\n      id: getFieldId(`formly_${this.formId}`, field, field['index']),\n      hooks: {},\n      modelOptions: {},\n      templateOptions: !field.type || !field.key ? {} : {\n        label: '',\n        placeholder: '',\n        focus: false,\n        disabled: false,\n      },\n    });\n\n    if (field.lifecycle) {\n      console.warn(`NgxFormly: 'lifecycle' is deprecated since v5.0, use 'hooks' instead.`);\n    }\n\n    if (\n      field.type !== 'formly-template'\n      && (\n        field.hasOwnProperty('template')\n        || (field.expressionProperties && field.expressionProperties.template)\n      )\n    ) {\n      if (field.type) {\n        console.warn(`NgxFormly: passing 'type' property is not allowed when 'template' is set.`);\n      }\n      field.type = 'formly-template';\n    }\n\n    if (!field.type && field.fieldGroup) {\n      field.type = 'formly-group';\n    }\n\n    if (field.type) {\n      this.formlyConfig.getMergedField(field);\n    }\n\n    if (!field['autoClear'] && !isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {\n      assignModelValue(root.model, getKeyPath(field), field.defaultValue);\n    }\n\n    this.initFieldWrappers(field);\n  }\n\n  private initFieldWrappers(field: FormlyFieldConfig) {\n    field.wrappers = field.wrappers || [];\n    const fieldTemplateManipulators: TemplateManipulators = {\n      preWrapper: [],\n      postWrapper: [],\n      ...(field.templateOptions.templateManipulators || {}),\n    };\n\n    field.wrappers = [\n      ...this.formlyConfig.templateManipulators.preWrapper.map(m => m(field)),\n      ...fieldTemplateManipulators.preWrapper.map(m => m(field)),\n      ...field.wrappers,\n      ...this.formlyConfig.templateManipulators.postWrapper.map(m => m(field)),\n      ...fieldTemplateManipulators.postWrapper.map(m => m(field)),\n    ].filter((el, i, a) => el && i === a.indexOf(el));\n  }\n\n  private getFieldComponentInstance(field: FormlyFieldConfigCache) {\n    const componentRef = this.formlyConfig.resolveFieldTypeRef(field);\n    const instance: FormlyExtension = componentRef ? componentRef.instance as any : {};\n\n    return {\n      prePopulate: () => instance.prePopulate && instance.prePopulate(field),\n      onPopulate: () => instance.onPopulate && instance.onPopulate(field),\n      postPopulate: () => instance.postPopulate && instance.postPopulate(field),\n    };\n  }\n}\n","import { NgModule, ModuleWithProviders, ANALYZE_FOR_ENTRY_COMPONENTS, Inject, Optional } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormlyForm } from './components/formly.form';\nimport { FormlyField } from './components/formly.field';\nimport { FormlyAttributes } from './components/formly.attributes';\nimport { FormlyConfig, ConfigOption, FORMLY_CONFIG } from './services/formly.config';\nimport { FormlyFormBuilder } from './services/formly.form.builder';\nimport { FormlyGroup } from './templates/formly.group';\nimport { FormlyValidationMessage } from './templates/formly.validation-message';\nimport { FormlyTemplateType } from './templates/field-template.type';\n\nimport { FieldExpressionExtension } from './extensions/field-expression/field-expression';\nimport { FieldValidationExtension } from './extensions/field-validation/field-validation';\nimport { FieldFormExtension } from './extensions/field-form/field-form';\nimport { CoreExtension } from './extensions/core/core';\n\nexport function defaultFormlyConfig(formlyConfig: FormlyConfig): ConfigOption {\n  return {\n    types: [\n      { name: 'formly-group', component: FormlyGroup },\n      { name: 'formly-template', component: FormlyTemplateType },\n    ],\n    extensions: [\n      { name: 'core', extension: new CoreExtension(formlyConfig) },\n      { name: 'field-validation', extension: new FieldValidationExtension(formlyConfig) },\n      { name: 'field-form', extension: new FieldFormExtension(formlyConfig) },\n      { name: 'field-expression', extension: new FieldExpressionExtension() },\n    ],\n  };\n}\n\n@NgModule({\n  declarations: [\n    FormlyForm,\n    FormlyField,\n    FormlyAttributes,\n    FormlyGroup,\n    FormlyValidationMessage,\n    FormlyTemplateType,\n  ],\n  entryComponents: [FormlyGroup, FormlyTemplateType],\n  exports: [FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage],\n  imports: [CommonModule],\n})\nexport class FormlyModule {\n  static forRoot(config: ConfigOption = {}): ModuleWithProviders<FormlyModule> {\n    return {\n      ngModule: FormlyModule,\n      providers: [\n        { provide: FORMLY_CONFIG, multi: true, useFactory: defaultFormlyConfig, deps: [FormlyConfig] },\n        { provide: FORMLY_CONFIG, useValue: config, multi: true },\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },\n        FormlyConfig,\n        FormlyFormBuilder,\n      ],\n    };\n  }\n\n  static forChild(config: ConfigOption = {}): ModuleWithProviders<FormlyModule> {\n    return {\n      ngModule: FormlyModule,\n      providers: [\n        { provide: FORMLY_CONFIG, useValue: config, multi: true },\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },\n        FormlyFormBuilder,\n      ],\n    };\n  }\n\n  constructor(\n    configService: FormlyConfig,\n    @Optional() @Inject(FORMLY_CONFIG) configs: ConfigOption[] = [],\n  ) {\n    if (!configs) {\n      return;\n    }\n\n    configs.forEach(config => configService.addConfig(config));\n  }\n}\n"]}