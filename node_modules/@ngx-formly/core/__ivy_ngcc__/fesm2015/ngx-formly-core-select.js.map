{"version":3,"sources":["D:/angularprojects/Employeesadding/node_modules/@ngx-formly/core/fesm2015/ngx-formly-core-select.js"],"names":[],"mappings":"AAAA;;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAsIC;;;;0BAGC;;;;;;;;;CAOD;;;;;;;;0BAMC","file":"ngx-formly-core-select.js","sourcesContent":["import { Pipe, NgModule } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlySelectOptionsPipe {\n    /**\n     * @param {?} options\n     * @param {?=} field\n     * @return {?}\n     */\n    transform(options, field) {\n        if (!(options instanceof Observable)) {\n            options = of(options);\n        }\n        return ((/** @type {?} */ (options))).pipe(map((/**\n         * @param {?} value\n         * @return {?}\n         */\n        value => this.toOptions(value, field || {}))));\n    }\n    /**\n     * @private\n     * @param {?} options\n     * @param {?} field\n     * @return {?}\n     */\n    toOptions(options, field) {\n        /** @type {?} */\n        const gOptions = [];\n        /** @type {?} */\n        const groups = {};\n        /** @type {?} */\n        const to = field.templateOptions || {};\n        to._flatOptions = true;\n        options.map((/**\n         * @param {?} option\n         * @return {?}\n         */\n        (option) => {\n            if (!this.getGroupProp(option, to)) {\n                gOptions.push(this.toOption(option, to));\n            }\n            else {\n                to._flatOptions = false;\n                if (!groups[this.getGroupProp(option, to)]) {\n                    groups[this.getGroupProp(option, to)] = [];\n                    gOptions.push({\n                        label: this.getGroupProp(option, to),\n                        group: groups[this.getGroupProp(option, to)],\n                    });\n                }\n                groups[this.getGroupProp(option, to)].push(this.toOption(option, to));\n            }\n        }));\n        return gOptions;\n    }\n    /**\n     * @private\n     * @param {?} item\n     * @param {?} to\n     * @return {?}\n     */\n    toOption(item, to) {\n        return {\n            label: this.getLabelProp(item, to),\n            value: this.getValueProp(item, to),\n            disabled: this.getDisabledProp(item, to) || false,\n        };\n    }\n    /**\n     * @private\n     * @param {?} item\n     * @param {?} to\n     * @return {?}\n     */\n    getLabelProp(item, to) {\n        if (typeof to.labelProp === 'function') {\n            return to.labelProp(item);\n        }\n        if (this.shouldUseLegacyOption(item, to)) {\n            console.warn(`NgxFormly: legacy select option '{key, value}' is deprecated since v5.5, use '{value, label}' instead.`);\n            return item.value;\n        }\n        return item[to.labelProp || 'label'];\n    }\n    /**\n     * @private\n     * @param {?} item\n     * @param {?} to\n     * @return {?}\n     */\n    getValueProp(item, to) {\n        if (typeof to.valueProp === 'function') {\n            return to.valueProp(item);\n        }\n        if (this.shouldUseLegacyOption(item, to)) {\n            return item.key;\n        }\n        return item[to.valueProp || 'value'];\n    }\n    /**\n     * @private\n     * @param {?} item\n     * @param {?} to\n     * @return {?}\n     */\n    getDisabledProp(item, to) {\n        if (typeof to.disabledProp === 'function') {\n            return to.disabledProp(item);\n        }\n        return item[to.disabledProp || 'disabled'];\n    }\n    /**\n     * @private\n     * @param {?} item\n     * @param {?} to\n     * @return {?}\n     */\n    getGroupProp(item, to) {\n        if (typeof to.groupProp === 'function') {\n            return to.groupProp(item);\n        }\n        return item[to.groupProp || 'group'];\n    }\n    /**\n     * @private\n     * @param {?} item\n     * @param {?} to\n     * @return {?}\n     */\n    shouldUseLegacyOption(item, to) {\n        return !to.valueProp\n            && !to.labelProp\n            && item != null\n            && typeof item === 'object'\n            && 'key' in item\n            && 'value' in item;\n    }\n}\nFormlySelectOptionsPipe.decorators = [\n    { type: Pipe, args: [{ name: 'formlySelectOptions' },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlySelectModule {\n}\nFormlySelectModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [FormlySelectOptionsPipe],\n                exports: [FormlySelectOptionsPipe],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { FormlySelectModule, FormlySelectOptionsPipe as Éµa };\n"]}